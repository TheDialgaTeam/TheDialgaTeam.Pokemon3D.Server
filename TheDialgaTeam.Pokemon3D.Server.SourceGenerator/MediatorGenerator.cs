// Pokemon 3D Server Client
// Copyright (C) 2023 Yong Jian Ming
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TheDialgaTeam.Pokemon3D.Server.SourceGenerator;

[Generator]
public sealed class MediatorGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var queryHandlerAttributeMethod = context.SyntaxProvider.ForAttributeWithMetadataName(typeof(QueryHandlerAttribute).FullName, 
            (node, _) => node is MemberDeclarationSyntax, 
            (syntaxContext, token) => syntaxContext.SemanticModel.GetDeclaredSymbol(syntaxContext.TargetNode, token) as IMethodSymbol);

        context.RegisterSourceOutput(queryHandlerAttributeMethod, (productionContext, symbol) =>
        {
            // public static partial void Test(this IServiceCollection collection)
            
            if (symbol == null) return;
            if (!symbol.IsPartialDefinition) return;
            if (symbol.Parameters.IsEmpty || symbol.Parameters.Length > 1) return;
            if (!symbol.Parameters[0].Type.ToDisplayString().Equals("Microsoft.Extensions.DependencyInjection.IServiceCollection")) return;

            var selectedType = symbol.GetAttributes().Where(data => data.AttributeClass?.ToDisplayString().Equals(typeof(QueryHandlerAttribute).FullName) ?? false)
                .SelectMany(data => data.ConstructorArguments)
                .Select(constant => constant.Value)
                .Single(constant => constant is ITypeSymbol) as ITypeSymbol;
            
            if (selectedType == null) return;

            var queryHandlers = selectedType.AllInterfaces
                .Where(typeSymbol => typeSymbol.IsGenericType)
                .Where(typeSymbol => typeSymbol.Name == "IRequestHandler")
                .Select(typeSymbol => $"            {symbol.Parameters[0].Name}.TryAddSingleton<{typeSymbol.ToDisplayString()}>(static provider => provider.GetRequiredService<{selectedType.ToDisplayString()}>());");

            var accessibility = symbol.DeclaredAccessibility switch
            {
                Accessibility.Private => "private",
                Accessibility.Public => "public",
                Accessibility.Internal => "internal",
                var _ => ""
            };

            var queryHandlerOutput = new StringBuilder();

            foreach (var queryHandler in queryHandlers)
            {
                queryHandlerOutput.AppendLine(queryHandler);
            }
            
            productionContext.AddSource($"{symbol.ContainingNamespace.ToDisplayString()}.{symbol.ContainingType.Name}.{symbol.Name}.g.cs", $@"// <auto-generated/>

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace {symbol.ContainingNamespace.ToDisplayString()}
{{
    {(symbol.ContainingType.IsStatic ? "static" : "")} partial class {symbol.ContainingType.Name}
    {{
        {accessibility} {(symbol.IsStatic ? "static" : "")} partial {symbol.ReturnType.ToDisplayString()} {symbol.Name}({symbol.Parameters[0].ToDisplayString()})
        {{
{queryHandlerOutput.ToString().TrimEnd()}
        }}
    }}
}}
");
        });
    }
}