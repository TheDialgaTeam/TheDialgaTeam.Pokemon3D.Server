<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/.run/TheDialgaTeam.Pokemon3D.Server.Cli.run.xml;E:/Git/TheDialgaTeam.Pokemon3D.Server/.run/TheDialgaTeam.Pokemon3D.Server.Gui.run.xml;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Scheduler/TerminalScheduler.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ConsoleBackgroundService.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ConsoleGuiService.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ServerHostedService.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Utilities/ApplicationUtility.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/ConsoleMessageViewModel.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/ObservableCollectionDataSource.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/PlayerListViewModel.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Views/ConsoleMessageView.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Views/MainConsoleView.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Views/PlayerListView.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/FodyWeavers.xml;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Cli/Program.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/Interfaces/ICommand.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/Interfaces/IPlayerCommand.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandExecuteResult.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandOption.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandOptionType.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandProcessor.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Commands/KickCommand.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Queries/GetPlayerProfile.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BannedPlayerProfile.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BaseTable.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BlockedPlayerProfile.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/LocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/PlayerProfile.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/DatabaseContext.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Database/DatabaseQueryHandler.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Extensions/HostBuilderExtensions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Localization/Formats/ArrayStringFormat.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Localization/Interfaces/IStringLocalizer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Localization/StringLocalizer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/20231208172602_Initial.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/20231208172602_Initial.Designer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/DatabaseContextModelSnapshot.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Commands/StartServer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Commands/StopServer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/ClientConnected.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/ClientDisconnected.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/NewPacketReceived.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/Packets/IPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/Packets/IRawPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerClient.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerClientFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerListener.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleClientDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleHostDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleJoinPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleOfferPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattlePokemonDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleQuitPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleRequestPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleStartPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ChatMessagePacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/CreatePlayerPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/DestroyPlayerPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/GameDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/GamestateMessagePacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/KickPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/Origin.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PacketType.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PingPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PlayerIdPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PrivateMessagePacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/RawPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerClosePacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerInfoDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerMessagePacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerRequestPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeJoinPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeOfferPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeQuitPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeRequestPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeStartPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/WorldDataPacket.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/NetworkContainer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerClient.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerClientFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerHandler.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Interfaces/IPokemonServerOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Providers/MicrosoftGenericHostOptionsProvider.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/DatabaseOptionsValidation.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/NetworkOptionsValidation.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/SecurityOptionsValidation.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/ServerOptionsValidation.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/ChatOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/DatabaseOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/LocalizationOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/NetworkOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/PvPOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/SecurityOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/ServerOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/TradeOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Options/WorldOptions.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerJoin.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerLeft.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerUpdated.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Interfaces/IPlayer.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Interfaces/IPlayerFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/BusyType.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Player.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/PlayerFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/PlayerType.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Player/Position.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/Argon2PasswordHashingProvider.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/IPasswordHashingProvider.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/Pbkdf2PasswordHashingProvider.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/IPasswordHashingFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/PasswordHashingFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Utilities/NatDeviceUtility.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/Utilities/SpanUtility.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/CreateLocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/StartLocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/StopLocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Events/LocalWorldUpdate.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Interfaces/ILocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Interfaces/ILocalWorldFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorld.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorldFactory.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorldHandler.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Season.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Core/World/Weather.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/Utilities/ApplicationUtility.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/ViewModels/MainWindowViewModel.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/Views/MainWindow.axaml.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/App.axaml.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/FodyWeavers.xml;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Gui/Program.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Test/Commands/CommandProcessorTest.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Test/Network/Packets/RawPacketTest.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/TheDialgaTeam.Pokemon3D.Server.Test/GlobalUsings.cs;E:/Git/TheDialgaTeam.Pokemon3D.Server/appsettings.json;E:/Git/TheDialgaTeam.Pokemon3D.Server/appsettings.schema.json;E:/Git/TheDialgaTeam.Pokemon3D.Server/localization.json;E:/Git/TheDialgaTeam.Pokemon3D.Server/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;E:/Git/TheDialgaTeam.Pokemon3D.Server&quot;:&quot;{\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Interfaces/ILocalWorld.cs\&quot;:\&quot;This file defines an interface called ILocalWorld for a local game world in the Pokemon 3D Server.\\n\\nSome key things it does:\\n\\n- Defines properties to get/set the current season, weather, time, target season/weather, etc of the world.\\n\\n- Has methods to start and stop the world simulation. \\n\\n- Has a method GetWorldDataPacket() to generate a packet with world data to send to clients.\\n\\nKey functions:\\n\\n- CurrentSeason, CurrentWeather, CurrentTime - Get current world state\\n- TargetSeason, TargetWeather, TargetOffset - Set target world state \\n- DoDayCycle - Enable/disable day/night cycle\\n- Player - Get current player in world\\n- StartWorld(), StopWorld() - Start/stop world simulation\\n- GetWorldDataPacket() - Generate packet with world data\\n\\nSo in summary, this interface defines the core properties and methods needed to represent and control a local game world instance on the server. Implementations would handle things like weather/season transitions, day/night cycles, and synchronizing world state to clients.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorld.cs\&quot;:\&quot;This file defines the LocalWorld class which represents the local world/environment for a player in the game.\\n\\nKey functions:\\n\\n- StartWorld/StopWorld - Starts/stops the timer that drives the day/night cycle and weather changes\\n\\n- GetWorldDataPacket - Gets a packet with the current season, weather and time to send to the player\\n\\n- TimerCallback - Called periodically by the timer, handles advancing time and changing seasons/weather\\n\\n- GenerateNewSeason - Generates a new season based on the target season setting \\n\\n- GenerateNewWeather - Generates new weather based on the target weather setting\\n\\n- Dispose - Cleans up the timer resource\\n\\nThe LocalWorld handles tracking the current time, season and weather for a player. It advances these values periodically based on configurable settings for day/night cycle, target season/weather etc. It can send updates to the player and mediator when values change. So in summary, it manages the local environment simulation for a player in the game world.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandOption.cs\&quot;:\&quot;This file defines a CommandOption record class that is used to represent options for commands in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- CommandOption is a record class, meaning it represents an immutable value type.\\n\\n- It has properties for:\\n  - Name - The name of the option\\n  - Description - A description of what the option does\\n  - IsRequired - Whether the option is required or optional\\n  - Type - The type of the option (enum CommandOptionType)\\n\\n- This allows commands to define optional/required parameters with types.\\n\\n- It provides a clean way to represent the options/parameters that commands can accept in a structured way.\\n\\n- The CommandOption class is likely used by command parsing/validation logic to check that users provide the correct options with the right types.\\n\\n- It standardizes how options are defined across all commands in a consistent way.\\n\\nSo in summary, it provides a way to define the optional/required parameters that commands can accept in a structured, standardized format using this CommandOption record class. This helps with command parsing, validation and documentation of what each command expects.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/IPasswordHashingFactory.cs\&quot;:\&quot;This file defines an interface for a password hashing factory in TheDialgaTeam Pokemon 3D Server project.\\n\\nKey things:\\n\\n- It is in the Security/PasswordHashing namespace, indicating it relates to password hashing functionality.\\n\\n- The interface is called IPasswordHashingFactory.\\n\\n- It defines a single method GetProvider(). This method will return an implementation of the IPasswordHashingProvider interface, allowing retrieval of a password hashing provider.\\n\\nSo in summary:\\n\\n- This defines a factory interface for creating password hashing providers. \\n\\n- The factory will allow retrieving a concrete implementation of IPasswordHashingProvider, which likely defines methods for hashing, verifying, etc passwords.\\n\\n- By using a factory, the code remains decoupled from the specific hashing provider implementation. This allows easy switching of providers.\\n\\n- The factory interface provides a single entry point to obtain a password hashing provider instance for hashing/verifying passwords securely.\\n\\nSo the key role is to abstract and manage the retrieval of a password hashing provider via a factory pattern.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/IPasswordHashingProvider.cs\&quot;:\&quot;This file defines an interface for password hashing providers in TheDialgaTeam Pokemon 3D Server.\\n\\nKey functions:\\n\\n- ComparePassword(string password, string passwordHash) - Compares a plain text password to an existing hashed password to validate authentication. Returns true if they match.\\n\\n- GeneratePasswordHash(string password) - Hashes a plain text password using the provider\\u0027s algorithm. Returns the hashed password string. \\n\\nThe purpose of this interface is to allow different password hashing algorithms/providers to be plugged in while maintaining a common interface for comparing and generating password hashes. Classes that implement this interface can then be used by authentication code to validate login credentials in a standardized way.\\n\\nSome key points:\\n\\n- It defines a contract/API for password hashing functionality \\n- Allows different hashing algorithms/providers to be swapped in transparently\\n- Standardizes how password comparison and generation is done\\n- Authentication code only needs to depend on this interface, not specific implementations\\n\\nSo in summary, it provides an abstraction layer for password hashing that enables flexibility in choosing hashing algorithms.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/DestroyPlayerPacket.cs\&quot;:\&quot;This file defines a packet for destroying a player on the server.\\n\\nKey things:\\n\\n- DestroyPlayerPacket is a record that takes an integer ID as a constructor parameter. This will be the ID of the player to destroy.\\n\\n- It implements the IPacket interface, which is required for all packets.\\n\\n- There is a constructor that takes a raw packet and parses the ID from it.\\n\\n- ToServerRawPacket() method converts the packet to a raw packet that can be sent to the server. It sets the packet type, origin, and includes the ID as data. \\n\\n- ToClientRawPacket() throws an exception, as this packet is only meant to be sent from server to client.\\n\\nSo in summary, this packet defines the data needed to destroy a player on the server (their ID) and provides methods to serialize/deserialize it to/from the raw packet format for network transmission. The key purpose is to allow the server to notify clients that a player has been destroyed.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/ObservableCollectionDataSource.cs\&quot;:\&quot;This file defines an ObservableCollectionDataSource class that implements the IListDataSource interface. It acts as a data source for binding an ObservableCollection to a ListView control in Terminal.Gui.\\n\\nKey functions:\\n\\n- Constructor that subscribes to changes in the ObservableCollection to update the Length property.\\n\\n- Render method that renders the item at the given index from the collection to the ListView control. It handles different data types. \\n\\n- Count property that returns the count of items in the underlying collection. \\n\\n- Length property that tracks the maximum length of any item string.\\n\\n- IsMarked/SetMark methods required by the interface but not implemented since marking is not supported. \\n\\n- ToList method that returns the underlying collection.\\n\\n- Dispose method to clean up subscriptions.\\n\\nSo in summary, it bridges an ObservableCollection to a ListView control, handling rendering of items and updating lengths on collection changes. This allows binding collections to lists in the terminal UI.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/Origin.cs\&quot;:\&quot;This file defines an Origin struct that represents the origin/source of a network packet in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- Origin is a readonly record struct that just contains an Id field.\\n\\n- It defines some static Origin values for common origins:\\n\\n  - Server (-1)\\n  - NewPlayer (0)\\n\\n- It allows implicit conversion between Origin and the underlying int Id.\\n\\n- ToRawString() converts the Id to a string for serialization.\\n\\nSo in summary, it provides a typed wrapper around the integer Id to represent packet origins in a strongly typed way, and defines some common predefined values. This would allow packets to include an Origin field to identify where they came from in a type-safe manner.\\n\\nKey functions:\\n\\n- Static predefined Origin values like Server, NewPlayer\\n- Implicit conversions between Origin and underlying int \\n- ToRawString() for serialization of Origin to string\\n\\nSo it provides a clean way to represent and work with packet origins in the network code.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Weather.cs\&quot;:\&quot;This file defines an enum called Weather that represents different weather conditions in the game world.\\n\\nSome key points:\\n\\n- It defines constants for different weather types like Clear, Rain, Snow, etc. \\n\\n- It also defines special weather types like Random, WeatherSeason that are used to indicate random/seasonal weather.\\n\\n- Default is the default weather if none is specified. \\n\\n- This enum is used to represent the current weather condition in different areas/regions of the game world.\\n\\n- It doesn\\u0027t define any functions itself. The enum is likely used by other classes/systems in the game to set/get the current weather, trigger weather changes, apply weather effects etc.\\n\\nSo in summary, this file defines an enumeration of different weather types that can be used elsewhere in the codebase to represent and manage the weather system in the game world. It doesn\\u0027t contain any functions itself but provides a set of constants for working with weather.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Test/Commands/CommandProcessorTest.cs\&quot;:\&quot;This file contains unit tests for the CommandProcessor class in TheDialgaTeam.Pokemon3D.Server project.\\n\\nKey things:\\n\\n- It is marked with attributes to indicate it contains tests for the CommandProcessor class\\n- It defines a TheoryData object with sample command string inputs and expected argument outputs\\n- It has a single unit test method GetCommandArgsTest that takes the sample inputs/outputs and asserts the CommandProcessor.GetCommandArgs method returns the expected results\\n\\nSo in summary:\\n\\n- It tests the CommandProcessor.GetCommandArgs method that parses command arguments from a string\\n- It provides sample inputs and expected outputs in a TheoryData object \\n- It runs the method on each sample and asserts the results match expectations\\n\\nThe purpose is to validate that the CommandProcessor correctly handles parsing command arguments from strings with different formats like quoted arguments, multiple arguments etc. This helps ensure the command parsing logic works as expected.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ServerHostedService.cs\&quot;:\&quot;This file defines a ServerHostedService class that implements the IHostedService interface in .NET.\\n\\nThe key things it does:\\n\\n- It is used to start and stop the server when the hosting application starts and stops.\\n\\n- The constructor injects an IMediator which is used to send commands to start/stop the server.\\n\\n- StartAsync sends a StartServer command to the mediator when the app starts.\\n\\n- StopAsync sends a StopServer command to the mediator when the app stops. \\n\\n- It uses the mediator pattern to communicate with other parts of the application (likely the server itself) to start and stop the server in a decoupled way.\\n\\n- Implements the standard StartAsync and StopAsync interface methods required by IHostedService to hook into the app lifecycle.\\n\\nSo in summary, it provides a hosted service that uses the mediator pattern to start the server on app start and stop it on app shutdown as part of the standard .NET hosting lifecycle.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/GamestateMessagePacket.cs\&quot;:\&quot;This file defines a GamestateMessagePacket class that represents a packet for sending game state messages in the Pokemon 3D server.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which defines common packet functionality.\\n\\n- The constructor takes an Origin and message string to populate the packet data. \\n\\n- There is also a constructor that takes a raw packet and populates from its data.\\n\\n- ToServerRawPacket throws an exception, as this packet type is only meant to be sent to clients.\\n\\n- ToClientRawPacket builds a RawPacket object to send to clients, with the packet type, origin, and message string as data.\\n\\nSo in summary, this class:\\n\\n- Defines a packet for sending game state messages \\n- Populates from/converts to raw packet format for transmission\\n- Implements IPacket interface for common packet functionality\\n- Is only meant to be sent from server to clients\\n\\nThe key functions are the constructors for populating data and the ToClientRawPacket method for converting to a raw format for transmission to clients.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattlePokemonDataPacket.cs\&quot;:\&quot;This file defines a packet class for sending battle pokemon data between the server and client in a Pokemon 3D game.\\n\\nKey things:\\n\\n- BattlePokemonDataPacket is a record class that represents the packet. It contains the origin, battle partner origin, and pokemon data string.\\n\\n- It has constructors to initialize from a raw packet or directly. \\n\\n- ToServerRawPacket() method converts the packet to a raw packet format to send to the server. \\n\\n- ToClientRawPacket() method converts the packet to a raw packet format to send to the client. \\n\\n- The raw packet formats are different - server only includes the data, client includes the battle partner origin as well.\\n\\nSo in summary, this class defines the packet format and provides methods to convert between the object and raw network packet representations, to allow sending battle pokemon data between client and server over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PrivateMessagePacket.cs\&quot;:\&quot;This file defines a PrivateMessagePacket class that represents a private message packet in the network protocol.\\n\\nKey things:\\n\\n- It is a record class that takes the player sending the message, the origin ID, the chat partner ID, and the message string.\\n\\n- It has constructors to initialize from a raw packet or player+raw packet.\\n\\n- It has methods to convert the packet to a raw packet for sending to the server or client:\\n\\n  - ToServerRawPacket() - Converts to a raw packet for the server based on if the player is the origin or not. Includes chat partner ID if not the origin.\\n\\n  - ToClientRawPacket() - Converts to a raw packet for the client, always including chat partner ID.\\n\\n- The purpose is to encapsulate the data for a private message into an object, and provide methods to convert to/from the raw network format. This allows cleanly handling private messages in the network layer.\\n\\nSo in summary, it defines the data and conversion methods for private message packets in the network protocol.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/TradeOptions.cs\&quot;:\&quot;This file defines the TradeOptions class for the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is in the TheDialgaTeam.Pokemon3D.Server.Core.Options namespace.\\n\\n- TradeOptions is a sealed class, meaning it cannot be inherited from.\\n\\n- It has two boolean properties:\\n\\n  - AllowTrade - Controls whether trading is allowed globally on the server\\n\\n  - AllowTradeValidation - Controls whether validation of trades is performed, like checking for hacked/illegal Pokemon\\n\\n- These properties can be configured in the server options/configuration to control trading behavior.\\n\\n- AllowTrade defaults to true, meaning trading is on by default. \\n\\n- AllowTradeValidation also defaults to true, meaning validation of trades is performed by default.\\n\\nSo in summary, this class defines the configurable options related to trading functionality on the Pokemon 3D Server - whether trading is allowed at all, and whether validation of trades is performed. These options can then be set in the server configuration to control the trading rules.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/ChatOptions.cs\&quot;:\&quot;This file defines options for chat functionality in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It defines a ChatOptions class that holds configuration for chat\\n- AllowChat property controls whether chat is enabled or disabled globally\\n- ChatChannels property defines the available chat channels/rooms that users can chat in\\n\\nSo in summary:\\n\\n- It provides a way to configure chat options like enabling/disabling chat and defining available channels\\n- These options can then be read by the chat system to determine allowed behavior and available channels\\n- Things like globally enabling/disabling chat and restricting it to certain predefined channels can be configured via this class\\n\\nSo the main functions are:\\n\\n1. Define configuration for chat options\\n2. Allow enabling/disabling chat globally \\n3. Define available chat channels/rooms\\n4. Provide a way for other parts of the chat system to read these configuration options\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeQuitPacket.cs\&quot;:\&quot;This file defines a TradeQuitPacket class that represents a packet for quitting a trade in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It implements the IPacket interface, meaning it can serialize/deserialize to/from a raw packet format.\\n\\n- The constructor takes the origin (who sent the packet) and trade partner. \\n\\n- There is a constructor that parses a raw packet into a TradeQuitPacket object.\\n\\n- ToServerRawPacket() serializes the packet data to be sent to the server.\\n\\n- ToClientRawPacket() serializes the packet data to be sent to the client. \\n\\n- The packet type is TradeQuit, as defined in RawPacket.PacketType.\\n\\nSo in summary, this packet class handles the serialization/deserialization of a \\\&quot;quit trade\\\&quot; message between the client and server during a Pokemon trade session. It allows cleanly representing the packet data and converting between the object and raw network formats.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Interfaces/IPokemonServerOptions.cs\&quot;:\&quot;This file defines an interface called IPokemonServerOptions in the TheDialgaTeam.Pokemon3D.Server.Core.Options.Interfaces namespace.\\n\\nIt is an interface that defines the configuration options for a Pokemon server. Classes that implement this interface will provide access to the various server option configurations.\\n\\nSome key things it defines:\\n\\n- ServerOptions - Core server options like name, version etc.\\n\\n- NetworkOptions - Options related to network configuration like ports, protocols etc. \\n\\n- DatabaseOptions - Options for connecting to the database like connection string.\\n\\n- SecurityOptions - Options related to authentication, authorization etc.\\n\\n- WorldOptions - Options related to the game world like map size.\\n\\n- ChatOptions - Options for chat functionality.\\n\\n- PvPOptions - Options related to player vs player battles. \\n\\n- TradeOptions - Options related to trading between players.\\n\\n- LocalizationOptions - Options for localization/internationalization.\\n\\nSo in summary, it defines a contract for classes that will provide access to all the configurable options needed to run a Pokemon server. Implementations of this interface will expose the options as properties that can then be used to configure the server behavior.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Program.cs\&quot;:\&quot;This file contains the entry point for the Pokemon 3D server command line interface (CLI) application.\\n\\nKey things it does:\\n\\n- Sets up Serilog for logging using either the ActionSink or AnsiConsoleSink depending on a configuration value for GUI mode.\\n\\n- Configures dependency injection services, adding the mediator and either the ConsoleGuiService + ServerHostedService or ConsoleBackgroundService + ServerHostedService depending on GUI mode.\\n\\n- Runs the application using the Host builder pattern, configuring Pokemon server options, Serilog, and services.\\n\\n- Handles unhandled exceptions by logging crash details to a file.\\n\\nKey functions:\\n\\n- Main - Entry point that sets up the host and runs the application\\n- OnCurrentDomainOnUnhandledException - Handles uncaught exceptions by logging to a crash file\\n- ConfigurePokemonServer - Configures Pokemon server options \\n- ConfigureSerilog - Configures Serilog logging\\n- ConfigureServices - Configures DI services\\n\\nSo in summary, it sets up the application hosting, logging, services, and error handling for the Pokemon server CLI.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/Pbkdf2PasswordHashingProvider.cs\&quot;:\&quot;This file defines a Pbkdf2PasswordHashingProvider class that implements password hashing using the PBKDF2 key derivation function.\\n\\nKey things it does:\\n\\n- Implements the IPasswordHashingProvider interface which defines methods for comparing passwords and generating password hashes.\\n\\n- Generates a random salt when hashing passwords. The salt is prepended to the hashed password.\\n\\n- Uses PBKDF2 to derive a cryptographic key from the password and salt. It can use different hash algorithms like SHA1, SHA256 etc based on configuration. \\n\\n- The number of iterations is also configurable to control the work factor. More iterations means hashing is slower.\\n\\n- ComparePassword compares a plain password against a stored hashed password.\\n\\n- GeneratePasswordHash generates a new hashed password by deriving a key from the password and salt using PBKDF2, then returning the salt + hash as a single encoded string.\\n\\n- It pools byte arrays to avoid memory allocations when hashing passwords.\\n\\nSo in summary, it provides an implementation of password hashing that uses industry standard PBKDF2 with a configurable hash algorithm and work factor via iterations.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ConsoleGuiService.cs\&quot;:\&quot;This file defines a ConsoleGuiService class that is responsible for running the console GUI for the Pokemon 3D Server CLI application.\\n\\nKey things it does:\\n\\n- It inherits from BackgroundService, so it can be run as a background service in the application.\\n\\n- The constructor takes an IServiceProvider which is used to resolve other services.\\n\\n- Overrides ExecuteAsync which is called when the service starts. It initializes the Terminal.Gui application and runs the MainConsoleView.\\n\\n- Application.Init initializes the Terminal.Gui application. \\n\\n- Application.Run displays and runs the MainConsoleView.\\n\\n- RxApp.MainThreadScheduler and RxApp.TaskpoolScheduler configure ReactiveUI schedulers for the main thread and background tasks.\\n\\n- It runs the GUI as a long running task so it continues in the background.\\n\\nSo in summary, it:\\n\\n- Initializes the Terminal.Gui console GUI \\n- Displays the main view\\n- Configures ReactiveUI schedulers\\n- Runs it as a background service\\n\\nSo the key function is to initialize and run the console GUI for the CLI application.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandExecuteResult.cs\&quot;:\&quot;This file defines a CommandExecuteResult struct that is used to represent the result of executing a command.\\n\\nKey things:\\n\\n- CommandExecuteResult is a readonly record struct with two fields:\\n  - IsSuccess - a bool indicating if the command execution succeeded\\n  - Exception - an optional Exception if the execution failed\\n\\n- It has two static factory methods:\\n  - Success() - Creates a CommandExecuteResult indicating success with no exception\\n  - Fail(exception) - Creates a CommandExecuteResult indicating failure, passing the exception\\n\\n- This allows commands to return a consistent result object that indicates both success/failure and includes any exception if there was a failure.\\n\\n- The main purpose is to have a clean way for commands to return execution results in a standardized format that captures both success/failure status and error details.\\n\\nSo in summary, it defines a simple result object for command execution and provides static methods to easily create success/failure results. This provides a clean way for commands to return standardized results.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/Utilities/ApplicationUtility.cs\&quot;:\&quot;This file contains a utility class called ApplicationUtility that provides information about the application.\\n\\nKey functions:\\n\\n- Name property - Returns the name of the application as specified in the AssemblyProductAttribute.\\n\\n- Version property - Returns the version number of the assembly as a string. \\n\\n- FrameworkVersion property - Returns the .NET framework version that the assembly is targeting, as specified in the TargetFrameworkAttribute.\\n\\nSo in summary, this utility class provides a central place to get the name, version and framework version of the application from the assembly attributes, without having to directly access the Assembly object. This information can then be used elsewhere in the application as needed.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/Program.cs\&quot;:\&quot;This file contains the entry point and startup code for the Avalonia GUI application for the Pokemon 3D server.\\n\\nKey things it does:\\n\\n- Defines the Main() method which is the entry point. It creates the host services, builds the Avalonia app, and starts it.\\n\\n- BuildAvaloniaApp() configures the Avalonia app builder to use ReactiveUI and platform detection. \\n\\n- CreateHost() creates a Microsoft.Extensions.Hosting host for the server. It configures services like logging and the mediator.\\n\\n- ConfigurePokemonServer() adds configuration for the Pokemon server core.\\n\\n- ConfigureServices() adds services like the mediator. \\n\\n- ConfigureLogging() configures logging to use an action logger which will log messages with timestamps.\\n\\n- The ServiceProvider property exposes the host services to the rest of the app.\\n\\nKey functions:\\n\\n- Main() - Entry point\\n- BuildAvaloniaApp() - Configures the Avalonia app\\n- CreateHost() - Creates the host and configures services\\n- ConfigurePokemonServer() - Configures the server core\\n- ConfigureServices() - Adds services \\n- ConfigureLogging() - Configures logging\\n\\nSo in summary, it sets up the host, configures services, and builds and runs the Avalonia GUI app.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/FodyWeavers.xml\&quot;:\&quot;This file is a configuration file for Fody, which is a tool for modifying .NET assemblies during compilation.\\n\\nSome key things about this file:\\n\\n- It specifies which \\\&quot;weavers\\\&quot; or plugins to run during compilation. In this case it is specifying the ReactiveUI weaver.\\n\\n- Weavers are plugins that modify the assembly in some way, like injecting code or making modifications. \\n\\n- The ReactiveUI weaver is likely injecting code to enable ReactiveUI functionality like property binding, commands, etc. ReactiveUI is a framework for building reactive UIs in .NET.\\n\\n- By including this file in the project, it tells Fody to run the ReactiveUI weaver during compilation to modify the assembly.\\n\\n- This allows the project to gain ReactiveUI capabilities without having to manually add the code itself. The weaver injects it.\\n\\n- Other common weavers include PropertyChanged.Fody for property change notification, NullGuard for null checking, etc.\\n\\nSo in summary, this file:\\n\\n- Configures Fody weaving during compilation \\n- Specifies the ReactiveUI weaver plugin\\n- This allows ReactiveUI functionality to be added to the assembly\\n\\nIt\\u0027s a configuration file that enables code weaving/modification during build via the Fody tool and ReactiveUI weaver.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/Providers/Argon2PasswordHashingProvider.cs\&quot;:\&quot;This file defines an Argon2PasswordHashingProvider class that implements the IPasswordHashingProvider interface. It provides functionality for hashing and comparing passwords using the Argon2 password hashing algorithm.\\n\\nKey functions:\\n\\n- ComparePassword(string, string) - Compares a plain text password against a hashed password to check if they match.\\n\\n- GeneratePasswordHash(string) - Takes a plain text password and generates a hashed password using Argon2. It generates a random salt, runs the password through Argon2id with the configured options, and combines the salt and hash into a base64 encoded string that is returned. \\n\\n- It uses the Argon2id class from the Konscious.Security library to perform the Argon2 hashing.\\n\\n- It injects an Argon2Options object via the constructor to configure the Argon2 parameters like iterations, memory usage, parallelism etc.\\n\\nSo in summary, it provides an implementation of password hashing and comparison using the Argon2 algorithm with configurable options, for use in a password authentication system.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorldFactory.cs\&quot;:\&quot;This file defines a class called LocalWorldFactory that implements the ILocalWorldFactory interface.\\n\\nThe key functions/purpose of this file are:\\n\\n- LocalWorldFactory is used to create instances of LocalWorld objects. It depends on an IServiceProvider to resolve dependencies.\\n\\n- CreateLocalWorld() creates a new LocalWorld instance without any parameters using the service provider.\\n\\n- CreateLocalWorld(ILocalWorld, IPlayer) creates a LocalWorld instance, passing in an existing ILocalWorld and IPlayer instance using the service provider.\\n\\nSo in summary, this factory class is responsible for creating LocalWorld objects that represent the player\\u0027s local world/map instance. It handles resolving dependencies using dependency injection. The two Create methods allow creating a new world or cloning an existing one with a player attached.\\n\\nThis allows LocalWorld instances to be created in a clean, standardized way while still allowing dependencies to be resolved via the service provider. The factory pattern is used to abstract away the object creation.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Player.cs\&quot;:\&quot;This file defines the Player class in the Pokemon 3D Server.\\n\\nKey things it does:\\n\\n- Implements the IPlayer interface to represent a connected player client\\n- Stores player data like ID, name, position, etc from the GameDataPacket\\n- Provides properties to access player data like name, position, etc\\n- Initializes the player by loading their profile and creating a local world\\n- Applies game data updates from packets sent by the client\\n- Sends packets back to the client\\n- Kicks the player by disconnecting their client\\n\\nKey functions:\\n\\n- InitializePlayer - Loads profile and creates local world\\n- ApplyGameDataAsync - Updates player data from client packets  \\n- ToGameDataPacket - Gets player data as a packet\\n- SendPacket - Sends a packet to the client\\n- Kick - Disconnects the client with a reason\\n- Dispose - Cleans up the local world\\n\\nSo in summary, it represents a connected player client, loads/saves their data, handles updates from the client, and facilitates communication between the server and client.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Services/ConsoleBackgroundService.cs\&quot;:\&quot;This file defines a ConsoleBackgroundService class that implements the BackgroundService base class in .NET.\\n\\nKey things it does:\\n\\n- Implements the ExecuteAsync method which runs the background service logic on a background thread.\\n\\n- Sets the console title to display the application name, version and framework version using values from the ApplicationUtility class. \\n\\n- Enters a read loop to continuously read commands from the console while the cancellation token is not triggered. \\n\\n- Currently it just reads the commands but does not do anything with them. The TODO comment indicates commands will be handled in the future.\\n\\nSo in summary:\\n\\n- Implements a background console service that runs on startup\\n- Sets the console title \\n- Reads commands continuously from the console\\n- Future work to handle the commands\\n\\nThe main purpose is to run a background process that interacts with the console, like reading commands, while the main application runs separately.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleOfferPacket.cs\&quot;:\&quot;This file defines a BattleOfferPacket class that represents a battle offer packet in the network protocol.\\n\\nKey things:\\n\\n- It is a record class that takes in the origin, battle partner origin, and pokemon data as parameters.\\n\\n- It has a constructor that takes a raw packet and parses the data to populate the fields. \\n\\n- It implements the IPacket interface, which is likely used to define common packet properties/methods.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that take the packet data and convert it back to a raw packet format to send over the network to the server or client. \\n\\n- ToServerRawPacket() only includes the origin and pokemon data, while ToClientRawPacket() includes the origin, battle partner origin, and pokemon data.\\n\\nSo in summary, it defines a class to represent a battle offer packet with parsing/conversion methods to convert between the object and raw network packet formats for sending to server/client. This allows defining packet data in a structured object format.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/20231208172602_Initial.cs\&quot;:\&quot;This file contains a class called Initial that inherits from the Migration class in Entity Framework Core. It is used to define the initial database schema/structure for an Entity Framework Core database context.\\n\\nKey things it does:\\n\\n- Defines the Up() method which contains instructions to create database tables when migrating the database to the initial version. \\n\\n- Creates tables for PlayerProfiles, BannedPlayerProfiles, BlockedPlayerProfiles, and LocalWorlds. Defines columns and constraints for each table.\\n\\n- Creates foreign key relationships between the tables, e.g. PlayerProfileId column in BannedPlayerProfiles references PlayerProfiles table.\\n\\n- Creates indexes on columns like PlayerProfileId to support foreign key relationships and efficient querying.\\n\\n- Defines the Down() method which contains instructions to remove/drop the tables if migrating the database down from the initial version.\\n\\nSo in summary, it defines the initial database schema/structure that Entity Framework Core will apply when migrating the database to the starting version. This allows defining the database schema using C# code rather than raw SQL.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/PlayerListViewModel.cs\&quot;:\&quot;This file defines a ViewModel class called PlayerListViewModel that handles displaying a list of online players in the client UI.\\n\\nKey things it does:\\n\\n- Implements notification handlers for PlayerJoin, PlayerUpdated, PlayerLeft events from the server\\n- Maintains an ObservableCollection of Player objects to display in the UI\\n- Player is a nested class that wraps an IPlayer object and handles displaying name/status\\n- Handle methods add/update/remove Player objects from the collection on events  \\n- GetPlayerById helper finds a Player by ID\\n- Players collection is the data bound list displayed in the UI\\n\\nKey functions:\\n\\n- Handle(PlayerJoin) - Adds a new Player on join\\n- Handle(PlayerUpdated) - Updates an existing Player\\u0027s status \\n- Handle(PlayerLeft) - Removes a Player on leave\\n- GetPlayerById - Finds a Player by ID\\n- Players collection - The observable list displayed in the UI\\n\\nSo in summary, it synchronizes the online player list from server events and exposes it as a collection for the UI to display.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/KickPacket.cs\&quot;:\&quot;This file defines a KickPacket class that represents a packet for kicking a client off the server in a Pokemon 3D multiplayer game.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which defines common packet functionality.\\n\\n- The KickPacket constructor takes a string reason for the kick. \\n\\n- There is a constructor that takes an IRawPacket to deserialize a packet received from the server.\\n\\n- ToServerRawPacket() method converts the KickPacket to a RawPacket that can be sent to the server. \\n\\n- ToClientRawPacket() throws an exception since this packet only flows from server to client.\\n\\nSo in summary:\\n\\n- Defines a packet object for kicking a client\\n- Takes a kick reason string \\n- Can deserialize from a raw packet\\n- Converts to a raw packet to send to the server\\n- Only flows from server to client\\n\\nIt provides the object representation and conversion methods needed for the server to kick a client by sending this packet type.\&quot;,\&quot;/appsettings.json\&quot;:\&quot;This file (appsettings.json) contains configuration settings for the Pokemon 3D server application.\\n\\nKey functions:\\n\\n- TheDialgaTeam.Serilog: Configures logging levels and log formatting\\n- TheDialgaTeam.Pokemon3D.Server.Cli: Enables/disables GUI mode\\n- Server: Main server configuration\\n  - ServerName, Description, WelcomeMessage: Server identity/branding\\n  - MaxPlayers, OfflineMode: Server capacity/availability \\n  - Network: Network binding and UPnP settings\\n  - World: Time, weather, season settings\\n  - Chat: Chat configuration\\n  - PvP, Trade: Enable/disable features and validation\\n\\nIn summary, it centralizes all the configurable options for the server in one place, allowing things like logging, networking, gameplay features, and server identity to be configured without code changes. This makes the server easier to customize, monitor and maintain.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Events/LocalWorldUpdate.cs\&quot;:\&quot;This file defines a LocalWorldUpdate event that is used for local world updates in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It defines a LocalWorldUpdate record class that implements the INotification interface. This class is used to encapsulate the event data.\\n\\n- The LocalWorldUpdate class takes a ILocalWorld parameter in its constructor. ILocalWorld is an interface that defines the local world object. \\n\\n- By implementing INotification, LocalWorldUpdate can be published as an event via the Mediator event bus.\\n\\n- The purpose of this event is to notify subscribers (via the event bus) when there is an update to the local world state. This allows other parts of the system to be notified and react to local world changes.\\n\\n- Key functions:\\n  - Defines the data class (LocalWorldUpdate) for the event\\n  - Takes the local world object as a parameter \\n  - Implements INotification to allow publishing on the event bus\\n\\nSo in summary, this file defines an event class that is used to notify other parts of the system when the local world state is updated, allowing those parts to react to and keep in sync with local world changes.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Utilities/ApplicationUtility.cs\&quot;:\&quot;This file contains a utility class called ApplicationUtility that provides information about the application.\\n\\nKey functions:\\n\\n- Name property - Returns the name of the application as specified in the AssemblyProductAttribute.\\n\\n- Version property - Returns the version number of the assembly as a string. \\n\\n- FrameworkVersion property - Returns the .NET framework version that the assembly is targeting as specified in the TargetFrameworkAttribute.\\n\\nSo in summary, this utility class provides a central place to get the name, version and framework version of the application from the assembly attributes, without having to directly access the Assembly object. This information can then be used elsewhere in the application as needed.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/NewPacketReceived.cs\&quot;:\&quot;This file defines an event class called NewPacketReceived that is fired when a new packet is received from a client.\\n\\nKey things:\\n\\n- It inherits from INotification, indicating it is an event notification.\\n\\n- The class is a sealed record, so it is immutable. \\n\\n- It has two properties - Network of type IPokemonServerClient which is the client the packet was received from, and RawPacket of type IRawPacket which contains the raw packet data.\\n\\n- This allows whatever code is subscribed to this event to access the client and packet data when a new packet is received.\\n\\n- It is part of the Network/Events namespace, indicating it is related to networking events in the server.\\n\\n- The file is documented with copyright and license information.\\n\\nSo in summary, this event class is fired by the server code whenever a new packet is received from a client. Subscribed handlers can then process/handle the packet and take appropriate actions based on the client and packet contents.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Utilities/NatDeviceUtility.cs\&quot;:\&quot;This file contains utilities for working with NAT (Network Address Translation) devices to enable port forwarding.\\n\\nKey functions:\\n\\n- DiscoverNatDeviceAsync(): Discovers a NAT device on the local network using UPnP discovery.\\n\\n- CreatePortMappingAsync(): Attempts to create a port mapping on the NAT device to forward an external port to an internal IP/port. It first checks if an existing mapping is expired and deletes it.\\n\\n- DestroyPortMappingAsync(): Deletes an existing port mapping on the NAT device. \\n\\nThe main purpose of these utilities is to enable port forwarding on the NAT device to allow external connections to reach internal server ports. This is needed for hosting multiplayer games or servers that need to accept incoming connections from outside the local network.\\n\\nIt uses the Mono.Nat library to interface with UPnP enabled NAT devices to dynamically create, delete and manage port mappings without requiring manual configuration on the router.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerRequestPacket.cs\&quot;:\&quot;This file defines a ServerRequestPacket class that represents a packet sent from the server to a client.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which defines common packet functionality.\\n\\n- It contains a single string property called Data that will hold the packet payload. \\n\\n- The constructor can take either a string or an IRawPacket. If from a raw packet, it extracts the data from the first data item.\\n\\n- ToServerRawPacket throws an exception, as this packet type is not sent to the server.\\n\\n- ToClientRawPacket constructs a RawPacket to send to the client, with the packet type set to ServerDataRequest, and the data item set to the Data property.\\n\\nSo in summary, it defines a packet class specifically for server requests to clients, with a single string payload. It handles converting to and from the raw packet format for transmission over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Test/GlobalUsings.cs\&quot;:\&quot;This file is declaring global using statements for a unit test project in C#.\\n\\nSome key things about this file:\\n\\n- It has the .cs file extension, indicating it contains C# code.\\n\\n- The namespace indicates it is part of a test project for something called TheDialgaTeam.Pokemon3D.Server. \\n\\n- The global using statement is declaring that the Xunit namespace can be used anywhere in the project without needing to explicitly import it. Xunit is a popular unit testing framework for .NET.\\n\\n- This allows any test classes, methods, etc. to directly use Xunit assertions, attributes, etc. without needing to qualify them with the namespace (e.g. can do Assert.Equal instead of Xunit.Assert.Equal).\\n\\n- Global using statements are commonly used in test projects to avoid repetitive importing of namespaces like Xunit that will be used throughout all the tests.\\n\\n- This file on its own doesn\\u0027t contain any functions, but serves to configure the global namespace imports for the entire test project so that Xunit can be used directly in any test code files.\\n\\nSo in summary, its key purpose is to declare a global using for the Xunit namespace to simplify its usage in the unit tests for this project. No functions itself, but sets up namespace configuration.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/PlayerProfile.cs\&quot;:\&quot;This file defines the PlayerProfile database table class in the Pokemon 3D Server Core project.\\n\\nKey points:\\n\\n- It inherits from BaseTable, which likely defines common database table properties and methods.\\n\\n- It defines the properties that will be columns in the PlayerProfile table, like DisplayName, GameJoltId, Password, PlayerType, etc. \\n\\n- The properties are annotated with attributes like [Index] and [required] to configure the database schema.\\n\\n- DisplayName is marked as a unique index, so no two profiles can have the same name.\\n\\n- It has navigation properties like Blacklist and BlockProfiles to define relationships to other tables.\\n\\n- This maps the PlayerProfile entity to a database table and defines its schema and relationships to other entities.\\n\\nKey functions:\\n\\n- Defines the database table structure and mappings for the PlayerProfile entity.\\n\\n- Allows querying, inserting, updating and deleting PlayerProfile records via the DbContext.\\n\\n- Provides a class/object model for working with PlayerProfile data in the application code.\\n\\nSo in summary, it defines the database representation and mappings for player profile data in the Pokemon 3D Server project.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/NetworkContainer.cs\&quot;:\&quot;This NetworkContainer class handles all network-related functionality in the server.\\n\\nKey functions:\\n\\n- Handle methods for various notification events from the mediator:\\n  - ClientConnected\\n  - ClientDisconnected \\n  - NewPacketReceived\\n  - PlayerJoin\\n  - PlayerUpdated\\n  - PlayerLeft\\n\\n- Parses and handles different packet types on new packet received:\\n  - GameDataPacket (for joining players)\\n  - ChatMessagePacket \\n  - GamestateMessagePacket\\n  - ServerDataRequest\\n\\n- Manages player objects stored in a dictionary, keyed by client\\n  - Gets/sets player objects \\n  - Gets player count\\n\\n- Handles player IDs\\n  - Gets next available ID\\n  - Checks if player exists by ID\\n\\n- Sends packets to clients as needed when events occur\\n  - On player join/leave/update\\n  - Relaying chat/gamestate messages\\n\\n- Utilities for getting player info\\n  - Display names\\n  - Enumerating players\\n\\nSo in summary, it handles all network events, packet parsing, player object management and inter-client communication.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ChatMessagePacket.cs\&quot;:\&quot;This file defines a ChatMessagePacket class that represents a chat message packet for the Pokemon 3D server network.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin and Message string as parameters. Origin indicates who sent the message.\\n\\n- It has a constructor that takes a raw packet to deserialize the packet data into the ChatMessagePacket object. \\n\\n- It implements the IPacket interface, which is required for all network packet classes.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that serialize the packet back into a raw packet object that can be sent over the network. \\n\\n- ToServerRawPacket() is used when sending the packet from client to server. ToClientRawPacket() is used when sending from server to client.\\n\\nSo in summary, it defines a class to represent a chat message packet that can be serialized/deserialized to/from the raw network packet format used for communication between the server and clients. This allows chat messages to be sent and received over the network in a standardized way.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerClosePacket.cs\&quot;:\&quot;This file defines a ServerClosePacket class that represents a packet sent from the server to clients to close the connection.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which defines common packet methods.\\n\\n- The constructor takes a reason string for why the connection is closing. \\n\\n- There is a constructor that takes a raw packet to deserialize the reason string from.\\n\\n- ToServerRawPacket() method converts the packet to a raw packet that can be sent to clients over the network. It sets the packet type, origin, and includes the reason string. \\n\\n- ToClientRawPacket() throws an exception since this packet only goes from server to clients, not vice versa.\\n\\nSo in summary, this class defines a packet object for closing server connections, with methods to serialize/deserialize to/from the raw network packet format. It allows the server to send a standardized close packet with a reason to all connected clients.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/SecurityOptions.cs\&quot;:\&quot;This file defines options for password hashing and security in the Pokemon 3D Server.\\n\\nKey things it does:\\n\\n- Defines supported password hashing providers - Pbkdf2 and Argon2\\n- Defines a SecurityOptions class that can hold the selected provider and its configuration\\n- Defines Pbkdf2Options and Argon2Options classes to hold configuration for each provider\\n\\nKey functions/classes:\\n\\n- SecurityOptions - Main class that holds selected provider and its configuration\\n- Pbkdf2Options - Holds config like hashing algorithm, iterations for Pbkdf2 provider  \\n- Argon2Options - Holds config like parallelism, memory, iterations for Argon2 provider\\n- SupportedPasswordHashingProvider - Allowed hashing providers \\n- SupportedHashingAlgorithm - Allowed hashing algorithms for Pbkdf2\\n\\nSo in summary, it defines the security options and configurations available for password hashing when authenticating users for the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeRequestPacket.cs\&quot;:\&quot;This file defines a TradeRequestPacket class that represents a packet for requesting to start a trade in the Pokemon 3D server.\\n\\nKey things:\\n\\n- It inherits from IPacket, which means it can serialize/deserialize to/from a raw packet format.\\n\\n- The constructor takes the origin (who sent the request) and trade partner. \\n\\n- There is a constructor that can build the packet from a raw packet, parsing the trade partner from the raw data.\\n\\n- ToServerRawPacket() returns a raw packet formatted to send to the server. \\n\\n- ToClientRawPacket() returns a raw packet formatted to send back to the client that initiated the request.\\n\\n- It defines the packet type (TradeRequest) and includes the necessary data (origin and trade partner) to represent a trade request in the raw packet format.\\n\\nSo in summary, it defines a packet object for requesting a trade that can serialize/deserialize to/from the network protocol, and includes the necessary data to represent a trade request message.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/NetworkOptions.cs\&quot;:\&quot;This file defines the NetworkOptions class which contains configuration options related to the network/server in a Pokemon 3D server project.\\n\\nKey things:\\n\\n- BindingInformation - Specifies the IP address and port the server will bind to and listen for incoming connections on. Default is any IP on port 15124.\\n\\n- UseUpnp - Boolean flag to indicate whether UPnP (Universal Plug and Play) should be used to automatically configure port forwarding on routers. \\n\\n- UpnpDiscoveryTime - If using UPnP, the number of seconds to wait for discovery of routers and port mapping configuration.\\n\\nSo in summary, this class defines the network configuration for the server, including the binding address/port and options around automatic port mapping via UPnP. It allows configuration of the network layer for the server through these options.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerInfoDataPacket.cs\&quot;:\&quot;This file defines a ServerInfoDataPacket class that represents a packet for sending server info data from the server to clients.\\n\\nKey things:\\n\\n- It is a record class that contains properties for player count, max server size, server name, description, and player names.\\n\\n- It has two constructors - one to parse from a raw packet, one for default values. \\n\\n- It implements the IPacket interface required for all packet classes.\\n\\n- It has two methods to convert the packet to a raw packet for sending:\\n\\n  - ToServerRawPacket() - Converts the packet data to a raw packet to send back to clients. Handles truncating player names if over limit.\\n\\n  - ToClientRawPacket() - Not supported, throws exception. Only sends to clients from server.\\n\\nSo in summary, it defines a packet class specifically for sending server info/state from the server to connected clients on startup/updates. The record class encapsulates the data, and it can convert to/from the raw packet format used for network transmission.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BannedPlayerProfile.cs\&quot;:\&quot;This file defines a class called BannedPlayerProfile that represents a banned player profile in the database.\\n\\nKey things:\\n\\n- It inherits from BaseTable, which means it represents a table/entity in the database.\\n\\n- It has properties to store the PlayerProfile of the banned player, the ban reason, start time and duration. \\n\\n- StartTime and Duration are required properties.\\n\\n- It has a property IsExpired that checks if the ban duration has expired based on the start time and duration.\\n\\nSo in summary, this class models a banned player record in the database, with properties to store relevant ban details like the player, reason, start/end times. It allows querying and managing banned player profiles in the database table.\\n\\nSome key functions it enables:\\n\\n- Storing banned player profiles in the database \\n- Querying banned profiles by player, reason, time etc\\n- Checking if a ban has expired based on duration\\n- Managing ban durations and expiration\\n\\nSo in a nutshell, it defines the database entity/table for banned players and their ban details.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/GameDataPacket.cs\&quot;:\&quot;This file defines the GameDataPacket class in the TheDialgaTeam Pokemon 3D Server.\\n\\nKey things:\\n\\n- GameDataPacket is a record type that represents a packet containing game data like player position, facing, skin etc. \\n\\n- It has constructors to initialize from a raw packet or player object. This allows populating missing fields from the player.\\n\\n- Methods like ToServerRawPacket and ToClientRawPacket convert the GameDataPacket to a RawPacket that can be sent over the network.\\n\\n- IsFullGameData checks if a raw packet contains a full set of game data needed for a new player.\\n\\nKey functions:\\n\\n- Constructors - Initialize from raw packet or player \\n- ToServerRawPacket - Convert to raw packet for server\\n- ToClientRawPacket - Convert to raw packet for client\\n- IsFullGameData - Check if packet has full new player data\\n\\nSo in summary, it defines the GameDataPacket data type and provides methods to serialize/deserialize it to/from the raw packet format used for network communication. This allows transmitting player state updates over the network in a standardized way.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeJoinPacket.cs\&quot;:\&quot;This file defines a TradeJoinPacket class that represents a packet for joining a trade in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin (the player joining the trade) and a TradePartner (the other player in the trade).\\n\\n- It has a constructor that takes a raw packet and parses the Origin and TradePartner from it. \\n\\n- It implements the IPacket interface, which is required for all packet classes.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that convert the packet to a raw format to send to the server or client. \\n\\n- ToServerRawPacket() doesn\\u0027t include the TradePartner since the server already knows that. ToClientRawPacket() includes it so the client knows who it\\u0027s trading with.\\n\\nSo in summary, it defines a packet class specifically for joining a trade session, with methods to serialize/deserialize it to/from the raw packet format used for network communication. This allows cleanly representing and transmitting trade join requests over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/DatabaseContextModelSnapshot.cs\&quot;:\&quot;This file is used for Entity Framework Core database migrations in the Pokemon3D server project.\\n\\nSome key things it does:\\n\\n- Defines the DatabaseContextModelSnapshot class which inherits from ModelSnapshot. This is used to snapshot the current state of the database model.\\n\\n- In the BuildModel method, it configures the relationships between the different entity classes that map to database tables. \\n\\n- It maps the PlayerProfile, LocalWorld, BannedPlayerProfile, BlockedPlayerProfile entity classes to their corresponding database tables.\\n\\n- It defines the primary keys, foreign key relationships, indexes etc between the different tables.\\n\\n- For example, it shows that PlayerProfile has a one-to-one relationship with LocalWorld, and a one-to-many with BannedPlayerProfile and BlockedPlayerProfile tables.\\n\\n- This allows Entity Framework Core to understand the database schema and perform operations like migrations, querying data etc based on the model configuration.\\n\\nSo in summary, the key functions are:\\n\\n1. Define the database model configuration \\n2. Map entity classes to database tables\\n3. Configure relationships between tables\\n4. Provide a snapshot of the current database model state\\n\\nThis allows EF Core to work with the database using this model definition.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/FodyWeavers.xml\&quot;:\&quot;This file is a configuration file for Fody, which is a tool for modifying .NET assemblies during compilation.\\n\\nSome key things about this file:\\n\\n- It specifies which \\\&quot;weavers\\\&quot; or plugins to run during compilation. In this case it is specifying ReactiveUI.\\n\\n- ReactiveUI is a plugin that will weave/inject ReactiveUI code into the assembly during compilation. This allows using ReactiveUI features without having to manually add code.\\n\\n- The weavers are specified inside the \\u003cWeavers\\u003e element. \\n\\n- The XML schema is defined to validate the format, in this case FodyWeavers.xsd.\\n\\n- This allows the project to take advantage of ReactiveUI features like reactive bindings, commands, etc. without having to manually add the code.\\n\\n- Fody and the specified weavers will run during compilation and modify the assembly to include the woven code.\\n\\nSo in summary, this file:\\n\\n- Configures Fody to run certain weavers during compilation \\n- Specifies the ReactiveUI weaver to inject ReactiveUI code\\n- This allows using ReactiveUI features without manual code additions\\n- The assembly is modified by Fody and weavers during compilation\\n\\nIt enables easy integration of ReactiveUI functionality into the project.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/ServerOptionsValidation.cs\&quot;:\&quot;This file contains a class called ServerOptionsValidation that validates ServerOptions configuration options.\\n\\nKey things it does:\\n\\n- Implements the IValidateOptions interface which is used for validating options in .NET.\\n\\n- Contains a Validate method that takes in the ServerOptions and name.\\n\\n- Validates:\\n  - Server name is not empty\\n  - Max player limit is more than 0\\n  - NoPingKickTime is at least 10 seconds\\n\\n- Returns a ValidateOptionsResult indicating success or failure with an error message on failure.\\n\\n- The purpose is to validate the ServerOptions configuration when the app starts up to ensure required/valid values are set.\\n\\nKey functions:\\n\\n- Validate - Main validation method that runs the checks\\n- Fail - Helper to create a failure result \\n- Success - Helper for success result\\n\\nSo in summary, it provides validation of the ServerOptions configuration on app startup to ensure required values are set correctly.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Commands/StopServer.cs\&quot;:\&quot;This file defines a command class called StopServer that is used to stop the server.\\n\\nKey things:\\n\\n- It implements the ICommand interface, which means it can be used as a command that can be sent over the network.\\n\\n- It is a record class, so it has no methods - it simply represents the command.\\n\\n- When this command is received by the server, it will likely trigger the server shutdown process. The server code would have logic to handle this command and shut down gracefully. \\n\\n- So in summary, when this command is sent to the server (likely from an admin client), it tells the server to shut down and exit. The server code handles actually performing the shutdown on receiving this command.\\n\\n- It allows remote administration/control of the server via commands sent over the network. The StopServer command allows stopping the server remotely in a clean way.\\n\\nSo in essence, it defines a simple data class that represents the \\\&quot;stop server\\\&quot; command, which can then be handled by the server code to actually perform the shutdown.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerUpdated.cs\&quot;:\&quot;This file defines an event class called PlayerUpdated that is used to notify other parts of the system when a player has been updated.\\n\\nKey things:\\n\\n- It inherits from INotification, indicating it is an event/notification class.\\n\\n- It has a single property called Player of type IPlayer, which will contain the player object that was updated. \\n\\n- PlayerUpdated is a record class, so it is immutable. Instances of it will just carry the player data without any behavior.\\n\\n- When a player is updated, a new PlayerUpdated event would be created with the updated player, and published to the event system/mediator.\\n\\n- Other classes that are interested in player updates can subscribe to this event and get notified when a player is updated, allowing them to react/update their own state in response.\\n\\n- This follows a common event/notification pattern to decouple the parts of the system that update players from those that need to react to updates. It avoids tight coupling between these components.\\n\\nSo in summary, it defines a simple event class to notify other parts of the system when a player object has been updated in the backend.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/Packets/IRawPacket.cs\&quot;:\&quot;This file defines an interface for raw packets in the Pokemon 3D Server network code.\\n\\nKey things:\\n\\n- IRawPacket is an interface that raw packet classes can implement to define common properties/methods\\n\\n- It defines properties that all raw packets will have:\\n  - Version \\n  - PacketType (enum indicating packet type)\\n  - Origin (enum indicating packet source)\\n  - DataItems (string array of packet data)\\n\\n- It defines a ToRawPacketString() method that raw packet classes must implement to serialize the packet data to a raw string format\\n\\nSo in summary:\\n\\n- It standardizes the common properties/methods that raw network packets will have\\n- Classes that represent specific raw packet types can implement this interface \\n- This allows raw packets to be treated generically in the network code\\n- The ToRawPacketString() method defines how packets will be serialized for transmission\\n\\nSo it provides a common interface for raw network packets that will be used for communication in the Pokemon 3D server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/PlayerFactory.cs\&quot;:\&quot;This file defines a PlayerFactory class that is used to create Player objects.\\n\\nThe key things it does:\\n\\n- Implements the IPlayerFactory interface, which defines a method for creating Player objects.\\n\\n- Takes an IServiceProvider in its constructor, which provides access to any registered services.\\n\\n- Has a CreatePlayer method that creates a Player instance using ActivatorUtilities. This allows the Player to be created using dependency injection.\\n\\n- CreatePlayer takes the necessary parameters to initialize a Player - the client, player ID, and game data packet. \\n\\n- It returns the newly created Player instance.\\n\\nSo in summary, the PlayerFactory is responsible for creating Player objects using dependency injection. Clients can get an instance of PlayerFactory and use it to generate Players as needed, such as when a new client connects. This allows Players to leverage any services registered with the DI container.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Extensions/HostBuilderExtensions.cs\&quot;:\&quot;This file contains extension methods for the IHostBuilder in .NET.\\n\\nKey things it does:\\n\\n- Configures services for the Pokemon server core dependencies:\\n  - Networking\\n  - Database\\n  - Localization\\n  - Options\\n  - World\\n  - Player\\n  - etc.\\n\\n- Registers options classes and binds configuration from appsettings.json\\n\\n- Registers options validation classes \\n\\n- Adds the database context factory\\n\\n- Configures password hashing\\n\\n- Adds configuration from the localization.json file\\n\\nThe main method is ConfigurePokemonServer which:\\n\\n- Configures the services collection\\n- Registers options and validators\\n- Adds database context\\n- Configures app configuration\\n\\nSo in summary, it sets up all the core dependencies and configuration needed to run the Pokemon server using the Microsoft Extensions framework. The key purpose is to simplify hosting configuration for the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Interfaces/IPlayer.cs\&quot;:\&quot;This file defines an interface called IPlayer that represents a player in the game.\\n\\nSome key things:\\n\\n- It defines properties that would be needed to represent a player\\u0027s state, like id, name, position, skin, etc. \\n\\n- Methods like InitializePlayer, ApplyGameDataAsync, ToGameDataPacket are used to initialize a player, apply game data updates, and convert a player to a packet.\\n\\n- SendPacket methods allow sending packets to the player. \\n\\n- Kick allows kicking a player from the game.\\n\\nKey functions:\\n\\n- Properties to represent player state like id, name, position\\n- InitializePlayer to initialize a new player \\n- ApplyGameDataAsync to apply updates to a player\\u0027s state\\n- ToGameDataPacket to convert a player to a packet\\n- SendPacket methods to send packets to the player\\n- Kick to remove a player from the game\\n\\nSo in summary, it defines the common interface and properties needed to represent a player in the game and methods to interact with and manage players.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Commands/StartServer.cs\&quot;:\&quot;This file defines a command class called StartServer that is used to start the server.\\n\\nKey things:\\n\\n- It implements the ICommand interface, which means it can be used as a command that can be sent over the network.\\n\\n- It is a record class, so it has automatic properties. No methods are defined.\\n\\n- When this command is received by the server, it will trigger the server startup logic. The server will initialize, start listening for connections, etc. \\n\\n- There is no implementation defined here - this is just the command definition. The actual server startup logic would be implemented elsewhere and triggered when this command is received.\\n\\n- It uses Mediator namespace, which suggests this command follows a mediator pattern for communication between client and server. The client can send this command to tell the server to start.\\n\\nSo in summary, this defines a simple StartServer command class that can be sent from a client to the server to trigger the server startup process when received. The actual startup logic is handled elsewhere.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandOptionType.cs\&quot;:\&quot;This file defines an enum called CommandOptionType in the TheDialgaTeam.Pokemon3D.Server.Core.Commands namespace.\\n\\nAn enum is used to define a set of named constants. In this case, it is defining the possible types for command options/arguments.\\n\\nThe key functions/purpose of this file is:\\n\\n- Define a set of valid option types for commands:\\n  - String\\n  - Integer \\n  - Boolean\\n  - Player\\n\\n- These option types can then be used when defining command syntax and parsing command arguments. For example, a command may specify that the first argument should be an integer, while the second is a player.\\n\\n- Provides type safety when working with command options. Rather than just using generic types like string, the code can use the enum values like CommandOptionType.Integer to make the intended type clear.\\n\\n- Likely used by other command related classes/code to define command syntax, validate arguments, cast arguments to the correct type etc.\\n\\nSo in summary, it defines a set of valid data types for command options/arguments that can then be reused consistently throughout the command system code.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/LocalizationOptions.cs\&quot;:\&quot;This file defines options classes for localization in the Pokemon 3D Server.\\n\\nKey functions:\\n\\n- LocalizationOptions - The main options class that contains localization settings.\\n\\n- LocalizedString - Contains localized strings for different parts of the server (player names, console messages, game messages).\\n\\n- PlayerNameDisplayFormat - Format for displaying player names.\\n\\n- ConsoleMessageFormat - Localized strings for console log messages. \\n\\n- GameMessageFormat - Localized strings for in-game chat/messages.\\n\\nThe purpose of this file is to externalize and localize all text-based strings used in the server. The options classes provide a way to configure localization settings like language, text formats, and localized string values. This allows the server code to remain language agnostic and support multiple languages.\\n\\nKey functions are defining the different localized string classes and properties to externalize all text resources from the code. The options model provides a way to configure localization at runtime.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/LocalWorldHandler.cs\&quot;:\&quot;This file defines a LocalWorldHandler class that handles commands and notifications related to local worlds in the game server.\\n\\nKey functions:\\n\\n- Handle(StartLocalWorld) - Starts the local world\\n- Handle(StopLocalWorld) - Stops the local world  \\n- Handle(CreateLocalWorld) - Creates a new local world\\n- Handle(LocalWorldUpdate) - Handles notifications when the local world updates\\n- PrintInformation - Logs information about the local world to the console\\n- Dispose - Disposes of the local world\\n\\nThe LocalWorldHandler acts as a mediator between command/event handlers and the local world implementation. It manages the lifecycle of a single local world instance and forwards commands/notifications to it. When the world updates, it notifies connected players and logs information.\\n\\nSo in summary, it coordinates and proxies interactions with the local game world running on the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/ViewModels/ConsoleMessageViewModel.cs\&quot;:\&quot;This file defines a ViewModel class called ConsoleMessageViewModel that is used to display console messages in the Pokemon 3D Server client UI.\\n\\nKey points:\\n\\n- It inherits from ReactiveObject which makes it a ReactiveUI view model.\\n\\n- It has an ObservableCollection property called ConsoleMessages that will contain the list of messages to display.\\n\\n- The constructor accepts an ActionSinkOptions object which is used to register a callback for log messages. \\n\\n- The callback method RegisteredActionLogger is called whenever a new log message is received. It parses the message into lines and adds them to the ConsoleMessages collection.\\n\\n- It limits the collection size to 5000 messages to prevent unbounded memory growth.\\n\\n- The ConsoleMessages collection is observable so any UI bound to it will automatically update when new messages are added.\\n\\nSo in summary, it provides a reactive view model that collects log messages from the backend server and surfaces them in an observable collection for display in the UI.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Test/Network/Packets/RawPacketTest.cs\&quot;:\&quot;This file contains unit tests for the RawPacket class in TheDialgaTeam Pokemon 3D Server.\\n\\nKey things it does:\\n\\n- Tests parsing a simple RawPacket with data items into a raw packet string and back\\n- Tests parsing a ServerRequestPacket into a RawPacket and back\\n\\nKey functions:\\n\\n- SimpleRawPacketWithDataItemsParsingTest()\\n  - Creates a RawPacket and checks the raw string matches expected\\n- ServerRequestPacketTest()\\n  - Creates a ServerRequestPacket and checks it parses to the expected RawPacket\\n  - Checks parsing a raw string back to the original ServerRequestPacket\\n\\nSo in summary, it is testing:\\n\\n- RawPacket string serialization/deserialization \\n- Parsing packets like ServerRequestPacket to/from RawPacket format\\n\\nThis helps validate the RawPacket class and packet parsing is working as expected.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file provides documentation for a Pokemon 3D Server application project.\\n\\nKey functions of the README.md file:\\n\\n- Provides an overview of the project - It allows players to host a Pokemon 3D server.\\n\\n- Includes a table of contents for easy navigation within the file. \\n\\n- Describes what the application was built with - It uses .NET 8.0 SDK.\\n\\n- Specifies the license under which the project is distributed - GPL-3.0 open source license. \\n\\n- Links back to the top of the file for easy navigation.\\n\\nIn summary, the README.md file:\\n\\n- Introduces and describes the project \\n- Lists technologies/frameworks used\\n- Specifies the license\\n- Provides a navigable structure for the documentation\\n\\nIt serves as the main documentation file for the project, giving readers an overview of what the application is and how it was developed.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/PlayerType.cs\&quot;:\&quot;This file defines an enum called PlayerType in the TheDialgaTeam.Pokemon3D.Server.Core.Player namespace.\\n\\nAn enum is used to define a set of named constants. In this case it is defining different types of players.\\n\\nThe key functions of this file are:\\n\\n- Define player types as enum values:\\n  - OfflinePlayer \\n  - GameJoltPlayer\\n  - Moderator\\n  - Administrator\\n\\n- Provide a way to classify/categorize different types of players in the game system. The player type can then be used to determine access levels, permissions, etc. \\n\\n- Allow checking a player\\u0027s type by comparing their type value to the enum values defined here (e.g. if player.Type \\u003d\\u003d PlayerType.Administrator).\\n\\n- Provide a common set of player type definitions that can be referenced throughout the codebase rather than having hardcoded integer/string values for types.\\n\\nSo in summary, it defines an enum to represent different player types in the system as named constants for easy reference and comparison when working with player objects and determining their capabilities.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/DatabaseOptionsValidation.cs\&quot;:\&quot;This file contains a class called DatabaseOptionsValidation that implements the IValidateOptions interface from Microsoft.Extensions.Options.\\n\\nIts key purpose is to validate DatabaseOptions configuration options.\\n\\nKey functions:\\n\\n- Validate(string? name, DatabaseOptions options) - The main validation method. Validates the DatabaseProvider property on the DatabaseOptions object.\\n\\n- Checks if the DatabaseProvider value is supported by comparing it to a list of supported providers. \\n\\n- Returns ValidateOptionsResult.Fail if invalid, ValidateOptionsResult.Success if valid.\\n\\nSo in summary, this class provides validation of the database provider option when the DatabaseOptions are configured. It ensures an unsupported provider is not used. This helps validate the configuration and catch errors early.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/ClientConnected.cs\&quot;:\&quot;This file defines an event class called ClientConnected that is raised when a client connects to the server.\\n\\nKey things:\\n\\n- It inherits from INotification, indicating it is an event/notification class.\\n\\n- It has a single constructor parameter of type IPokemonServerClient, which represents the connected client. \\n\\n- When a client connects, an instance of ClientConnected will be created, passing the connected client instance. \\n\\n- This event instance will then be published to any subscribers/listeners using an event mediator/dispatcher pattern.\\n\\n- Subscribers can handle the event to be notified that a new client connected and get a reference to the connected client instance.\\n\\nSo in summary:\\n\\n- Defines a connection event class \\n- Passed the connected client instance\\n- Published via mediator when a client connects\\n- Allows subscribers to be notified and get client reference\\n\\nThe main function is to notify other parts of the system when a new client connects and provide access to the client instance.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeStartPacket.cs\&quot;:\&quot;This file defines a TradeStartPacket class that represents a packet for starting a trade in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It inherits from IPacket, which means it can serialize/deserialize to a raw packet format.\\n\\n- The constructor takes the Origin (player initiating the trade) and TradePartner. \\n\\n- There is a constructor that takes a raw packet and parses the TradePartner from it.\\n\\n- ToServerRawPacket() returns a raw packet formatted to send to the server. \\n\\n- ToClientRawPacket() returns a raw packet formatted to send to the client.\\n\\n- It has properties for Origin and TradePartner that define the data in the packet.\\n\\nSo in summary, this packet class handles serializing/deserializing the data needed for starting a trade between two players into the raw packet format used for network communication in the server. This allows cleanly representing trade start data and converting it to/from the wire format.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Interfaces/ILocalWorldFactory.cs\&quot;:\&quot;This file defines an interface called ILocalWorldFactory.\\n\\nAn interface in C# defines a contract that classes can implement, but does not provide any implementation. Interfaces allow for abstraction and polymorphism.\\n\\nILocalWorldFactory defines the interface for a factory class that is responsible for creating LocalWorld objects. A factory pattern is used to encapsulate object creation.\\n\\nKey functions defined in the interface:\\n\\n- CreateLocalWorld() - Creates and returns a new LocalWorld object without any parameters.\\n\\n- CreateLocalWorld(ILocalWorld world, IPlayer player) - Creates and returns a new LocalWorld object, passing in an existing world and player object. \\n\\nThe purpose of this interface is to define a common way for factory classes to create LocalWorld objects, without depending on the specific implementation. Classes that implement this interface will provide the actual code to instantiate and return LocalWorld objects.\\n\\nSo in summary, it defines a contract for a factory that is responsible for creating LocalWorld game world objects in a standardized way.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Queries/GetPlayerProfile.cs\&quot;:\&quot;This file contains a query to retrieve a player\\u0027s profile from the database.\\n\\nKey things:\\n\\n- It defines a GetPlayerProfile query that takes an IPlayer instance and optional request name and password strings.\\n\\n- GetPlayerProfile implements the IQuery interface, indicating it is a database query that will return a PlayerProfile object or null.\\n\\n- The query will use the provided IPlayer instance to lookup the player\\u0027s profile in the database tables. \\n\\n- If a request name and password are provided, it may validate those against the profile before returning it.\\n\\n- When executed, this query will connect to the database, run the necessary SQL to retrieve the player\\u0027s profile, and return it wrapped in the IQuery response.\\n\\n- The main purpose is to allow retrieving a player\\u0027s profile data from the database in a type-safe way using the Mediator query pattern.\\n\\nSo in summary, it defines a database query that retrieves a player profile object by player ID, with optional name/password validation. This provides a clean interface to look up profile data from the backend databases.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PacketType.cs\&quot;:\&quot;This file defines an enum called PacketType that is used to identify different types of network packets in the Pokemon 3D server.\\n\\nSome key things:\\n\\n- It defines various packet types like GameData, PrivateMessage, ChatMessage, etc that are used for different communication purposes.\\n\\n- Each packet type has a description of its data format - things like who the origin/sender is, what data items it contains, who it is sent to.\\n\\n- The packet types are used to identify the purpose/contents of packets being sent over the network between the server and clients.\\n\\n- Common uses would be things like sending game state updates, private/chat messages, login/logout, trades, battles etc. \\n\\n- It provides a standardized way to classify different network messages and know what data to expect in each one.\\n\\n- The client and server can look at the packet type to know how to parse and handle the data being received.\\n\\nSo in summary, this enum defines the various types of network packets supported by the server/client protocol to facilitate different types of communication and synchronize game state. It acts as a way to categorize and identify packets being sent over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/KickCommand.cs\&quot;:\&quot;This file defines a KickCommand class that implements the IPlayerCommand interface.\\n\\nThe KickCommand class represents a command that can be executed by players to kick other players off the server.\\n\\nKey functions/properties:\\n\\n- Name - Returns the name of the command (\\\&quot;Kick\\\&quot;)\\n- Description - Description of what the command does\\n- RequiredPermission - Specifies the minimum player permission required to execute the command (Moderator)\\n- Options - Defines the command arguments/options that can be passed (a player target)\\n- ExecutePlayerCommand - Method that gets called to execute the command. In this case it is empty/not implemented.\\n\\nSo in summary, this class defines the structure and metadata for a \\\&quot;Kick\\\&quot; command that moderators can use to kick other players, but the actual kicking logic is not implemented here yet. It provides the skeleton for a kick command that can then be hooked up to the server\\u0027s command execution system.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Scheduler/TerminalScheduler.cs\&quot;:\&quot;This file defines a TerminalScheduler class that implements scheduling of actions on the main loop of a Terminal.Gui application.\\n\\nKey points:\\n\\n- TerminalScheduler inherits from LocalScheduler, which is the base class for schedulers that schedule work on the current thread.\\n\\n- It defines a static Default instance that can be used as the scheduler. \\n\\n- Schedule() is overridden to schedule the action either directly on the main loop or as a timeout, depending on the dueTime.\\n\\n- PostOnMainLoop() schedules the action to run immediately on the next iteration of the main loop. \\n\\n- PostOnMainLoopAsTimeout() schedules the action to run after dueTime by adding it as a timeout to the main loop.\\n\\n- It uses Terminal.Gui\\u0027s Application.MainLoop to schedule work, allowing reactive code to integrate with the terminal UI loop.\\n\\nSo in summary, it provides a scheduler implementation that allows reactive code to schedule work in a way that is synchronized with the main loop of the Terminal.Gui application. This allows reactive code to interact with and update the terminal UI.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/App.axaml.cs\&quot;:\&quot;This file is the main application class for an Avalonia desktop application.\\n\\nKey things it does:\\n\\n- Initializes Avalonia by calling AvaloniaXamlLoader.Load()\\n- Sets the main window type to MainWindow and sets its DataContext to a MainWindowViewModel instance\\n- Handles the OnFrameworkInitializationCompleted event to set the main window after Avalonia has initialized\\n\\nKey functions:\\n\\n- Initialize() - Initializes Avalonia \\n- OnFrameworkInitializationCompleted() - Called after Avalonia initializes, sets the main window\\n- Sets the main window type and view model\\n- Provides the entry point for the desktop application\\n\\nSo in summary, it sets up the initial Avalonia application instance, loads the XAML, and sets the main window and view model once Avalonia is ready. This provides the basic startup and initialization for the desktop GUI application.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Views/PlayerListView.cs\&quot;:\&quot;This file defines a PlayerListView class that represents the view for displaying a list of online players in the Pokemon 3D Server client application.\\n\\nKey things it does:\\n\\n- It has a ListView property called PlayerView that will display the list of players\\n- It binds this view to a PlayerListViewModel via the ViewModel property\\n- On initialization, it creates an ObservableCollectionDataSource to bind the PlayerListViewModel\\u0027s Players collection to the ListView\\n- It subscribes to changes in the Players collection and calls SetNeedsDisplay() and EnsureSelectedItemVisible() on the ListView when it changes\\n- It implements IDisposable and disposes of subscriptions on dispose\\n\\nKey functions:\\n\\n- Constructor - Initializes the view, binds it to the view model, sets up data binding\\n- Dispose - Cleans up subscriptions on dispose\\n- PlayerView - Gets the ListView that displays players\\n- ViewModel - Gets the bound PlayerListViewModel\\n\\nSo in summary, it sets up the view to display a list of players by binding it to an observable collection in the view model and handling updates.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerClientFactory.cs\&quot;:\&quot;This file defines an interface for creating Pokemon server client objects in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is in the namespace TheDialgaTeam.Pokemon3D.Server.Core.Network.Interfaces, indicating it is related to network interfaces.\\n\\n- The interface is called IPokemonServerClientFactory. Interfaces in C# start with I by convention.\\n\\n- It contains one method - CreateTcpClientNetwork. This method takes in a TcpClient object and returns an IPokemonServerClient object.\\n\\n- The purpose of this interface is to define a contract for creating Pokemon server client objects that can be used to communicate with client connections over TCP. \\n\\n- Classes that implement this interface will be responsible for actually instantiating and returning the IPokemonServerClient object when CreateTcpClientNetwork is called, using the provided TcpClient.\\n\\n- This allows different implementations of how to create the client objects, depending on needs - for example a default implementation vs one using dependency injection.\\n\\n- Key functions:\\n  - CreateTcpClientNetwork - Creates and returns an IPokemonServerClient for the provided TCP client connection\\n\\nSo in summary, it defines an interface for factories that can create Pokemon server client objects to handle individual client connections.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/RawPacket.cs\&quot;:\&quot;This file defines a RawPacket class that represents a raw packet that can be sent over the network.\\n\\nKey things it does:\\n\\n- Defines a RawPacket class that contains the packet version, type, origin and data items. This implements the IRawPacket interface.\\n\\n- Contains a TryParse method that can parse a raw string into a RawPacket object. It handles parsing out the different fields separated by pipes.\\n\\n- Defines an enum for PacketType.\\n\\n- Defines an enum for Origin. \\n\\n- Stores the protocol version constant.\\n\\n- The RawPacket constructor to create an instance.\\n\\n- A ToRawPacketString method to serialize the RawPacket back into a raw string that can be sent over the network.\\n\\nKey functions:\\n\\n- TryParse - Static method to parse a raw string into a RawPacket object\\n- ToRawPacketString - Serializes the RawPacket back into a raw string\\n- Constructor - Creates a new RawPacket instance\\n\\nSo in summary, it defines the RawPacket data model and provides parsing/serialization methods to convert between the raw string format and RawPacket object for sending packets over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerListener.cs\&quot;:\&quot;This file defines an interface called IPokemonServerListener for a Pokemon server listener.\\n\\nKey things:\\n\\n- It is in the namespace TheDialgaTeam.Pokemon3D.Server.Core.Network.Interfaces, indicating it defines an interface for network functionality.\\n\\n- IPokemonServerListener defines an interface that a Pokemon server listener class would implement. \\n\\n- It defines two async methods:\\n  - StartAsync - Starts the server listener asynchronously with a cancellation token\\n  - StopAsync - Stops the server listener asynchronously with a cancellation token\\n\\nSo in summary:\\n\\n- It defines an interface for classes that listen for connections on a Pokemon server\\n- The interface defines async Start and Stop methods to control the lifecycle of the listener\\n- Classes that implement this interface can be used to listen for connections and start/stop the listening functionality in an asynchronous way.\\n\\nSo this file defines a contract/interface for classes that listen for network connections on the Pokemon server. Implementations would handle the actual socket listening code.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleStartPacket.cs\&quot;:\&quot;This file defines a BattleStartPacket class that represents a packet for starting a battle in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin (the sender) and BattlePartner (the other trainer)\\n\\n- It has a constructor that takes a raw packet to deserialize the data \\n\\n- It has ToServerRawPacket and ToClientRawPacket methods that serialize the packet data back to a raw packet for sending to the server or client\\n\\n- ToServerRawPacket just sends the origin as no other data is needed by the server\\n\\n- ToClientRawPacket serializes the origin and battle partner into the raw packet data \\n\\nSo in summary, it defines the packet format for starting a battle and provides serialization/deserialization methods to convert between the object and raw network packet representations. This allows cleanly packaging up the battle start data to be sent over the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerClientFactory.cs\&quot;:\&quot;This file defines a class called PokemonServerClientFactory that is used to create instances of PokemonServerClient objects.\\n\\nKey points:\\n\\n- It implements the IPokemonServerClientFactory interface, which defines a method for creating client objects.\\n\\n- In the constructor it stores a reference to an IServiceProvider, which is used to resolve dependencies.\\n\\n- It has a CreateTcpClientNetwork method that uses the service provider to create an instance of PokemonServerClient, passing in the TcpClient. \\n\\n- This allows PokemonServerClient objects to be created and their dependencies injected via the service provider.\\n\\n- The factory pattern is used so that client object creation is centralized and dependencies are resolved through the service provider.\\n\\n- Key functions:\\n  - Constructor stores service provider reference\\n  - CreateTcpClientNetwork method creates PokemonServerClient instances by resolving dependencies\\n\\nSo in summary, it provides a centralized way to create PokemonServerClient objects and inject their dependencies via a service provider using the factory pattern.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/Interfaces/ICommand.cs\&quot;:\&quot;This file defines an interface called ICommand in the TheDialgaTeam.Pokemon3D.Server.Core.Commands.Interfaces namespace.\\n\\nThe ICommand interface is used to define the common properties and methods that all command classes in the Pokemon 3D Server must implement. \\n\\nKey things:\\n\\n- Name - Gets the name of the command that will be used by players (prefixed with \\\&quot;/\\\&quot;)\\n\\n- Description - Gets a short description of what the command does\\n\\n- Options - Gets any options/parameters that can be passed to the command\\n\\nSo in summary:\\n\\n- It defines a common interface for command classes\\n- Command classes must implement this interface \\n- It standardizes the name, description and options that all commands provide\\n\\nThis allows different command classes to be created that all share a common interface. The server can then discover and execute commands based on this interface without needing to know the specific class implementations. It provides a clean way to define and extend new commands in a standardized manner.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/WorldDataPacket.cs\&quot;:\&quot;This file defines a WorldDataPacket class that is used to send world data like season, weather and time from the server to the client.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which means it can serialize/deserialize to/from a raw packet.\\n\\n- The constructor takes the season, weather and time as parameters to initialize the packet. \\n\\n- There is also a constructor that parses the data from a raw packet.\\n\\n- ToServerRawPacket() method serializes the packet data to a RawPacket object to send to clients. \\n\\n- ToClientRawPacket() throws an exception as this packet is only sent from server to client, not vice versa.\\n\\nSo in summary:\\n\\n- It defines a packet for transmitting world data \\n- Implements serialization/deserialization of packet data\\n- Can initialize from data or raw packet\\n- Converts to a raw packet for transmission to clients\\n\\nThe main purpose is to allow the server to synchronize world state like weather/time to all connected clients.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Season.cs\&quot;:\&quot;This file defines an enum called Season that represents the different seasons in the game world.\\n\\nKey things:\\n\\n- It defines the different season values like Winter, Spring, Summer, Fall.\\n\\n- It also defines some \\\&quot;special\\\&quot; season values like Default, Random, SeasonMonth that likely have custom behaviors. \\n\\n- Default would probably set the season to a default value. \\n\\n- Random would randomly select a season. \\n\\n- SeasonMonth would base the season on the current month.\\n\\n- This enum is likely used to determine things like weather effects, spawn rates of certain Pokemon, appearance of seasonal decorations/flowers etc based on the current season setting in the game world.\\n\\n- The season value is probably stored somewhere globally and checked/updated periodically to drive seasonal changes in the game world over time.\\n\\nSo in summary, this enum defines the possible seasons that can exist in the game world and is used to determine seasonal logic, effects, and changes based on the current season value.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/ViewModels/MainWindowViewModel.cs\&quot;:\&quot;This file contains the MainWindowViewModel class for the Pokemon3D server GUI.\\n\\nKey things it does:\\n\\n- Defines ReactiveCommands for starting/stopping the server and exiting the application\\n- Handles logging output from the server and displays it in the UI\\n- Sends commands to the mediator to start/stop the server when the commands are executed\\n- Implements the LogToConsole method which appends new log entries and truncates the output if it gets too long\\n- Initializes dependencies like the mediator and action logger configuration\\n- Sets up reactive properties to drive the UI based on the command/logging state\\n\\nKey functions:\\n\\n- StartServer - Sends command to start the server via mediator\\n- StopServer - Sends command to stop the server via mediator  \\n- Exit - Shuts down the server and exits the app\\n- LogToConsole - Handles appending new log entries to the output string\\n- RemoveAnsiEscapeCode - Regex used to strip ANSI escape codes from logs\\n- Reactive properties like IsActive and LogOutput to drive the UI\\n\\nSo in summary, it coordinates starting/stopping the server via commands, handles logging output, and sets up the reactive view model to drive the GUI.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Utilities/SpanUtility.cs\&quot;:\&quot;This file contains a utility class called SpanUtility with methods for working with Span objects in .NET.\\n\\nKey functions:\\n\\n- SplitNext - Splits a ReadOnlySpan\\u003cchar\\u003e into two parts based on a separator string. Returns the part before the separator and assigns the part after to an out parameter.\\n\\nThis class provides some helpful extension methods for parsing and splitting Span objects, which are immutable sequences of elements. Specifically, SplitNext allows efficiently splitting a span of characters into the part before a separator and the remaining part, without having to allocate new string objects.\\n\\nOverall, this utility class helps work with Span data in a more functional way, such as splitting strings, without incurring allocation costs. The code is licensed under GPLv3.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/LocalWorld.cs\&quot;:\&quot;This file defines the LocalWorld table class in the database for the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It inherits from BaseTable, which provides common database table functionality.\\n\\n- It defines properties to store data about the local player\\u0027s world:\\n\\n  - PlayerProfile - The player profile of the local player\\n  - DoDayCycle - Whether day/night cycle is enabled\\n  - Season - The current season\\n  - Weather - The current weather\\n  - TimeOffset - Offset from real world time\\n\\n- This table is used to store and retrieve the local player\\u0027s current world state from the database. Things like time of day, weather effects, etc are persisted here. \\n\\n- When the player logs in, this data is loaded to initialize their local world state. When it changes, it is saved back to persist the changes.\\n\\n- So in summary, it provides the database representation and access to store/retrieve the local player\\u0027s current world configuration and state. This includes time of day, weather, season and linking to the player profile.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/PvPOptions.cs\&quot;:\&quot;This file defines options related to PvP (player vs player) battles in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It defines a PvPOptions class that holds configuration options for PvP.\\n\\n- There are two boolean properties:\\n\\n  - AllowPvP - Controls whether PvP battles are allowed at all. Default is true.\\n\\n  - AllowPvPValidation - Controls whether validation of PvP battles is performed. Default is true.\\n\\n- This allows the server administrator to enable/disable PvP functionality and validation as needed via configuration.\\n\\n- The options are defined as public properties so they can be easily accessed and modified from elsewhere in the server code.\\n\\nSo in summary, this file:\\n\\n- Defines a class to hold PvP configuration options\\n- Exposes boolean properties to control if PvP is allowed and if validation is performed  \\n- Allows the server administrator to configure PvP functionality via these options\\n\\nIt provides a way to centrally configure PvP battle rules and validation for the Pokemon 3D server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/DatabaseQueryHandler.cs\&quot;:\&quot;This file contains a class called DatabaseQueryHandler that handles database queries.\\n\\nKey things it does:\\n\\n- Implements the IQueryHandler interface to handle the GetPlayerProfile query\\n- Has a constructor that initializes the database context factory and migrates the database\\n- The Handle method:\\n  - Gets the database context from the factory\\n  - Checks if the player is a GameJolt player\\n  - Looks up the player profile by GameJolt ID\\n  - Checks for name conflicts if creating a new profile\\n  - Adds a new profile to the database if none exists\\n  - Returns the player profile\\n\\nKey functions:\\n\\n- Constructor - Initializes database context factory\\n- Handle - Main method that handles the GetPlayerProfile query\\n- Checks if player exists by GameJolt ID\\n- Checks for name conflicts \\n- Adds new profile to database\\n\\nSo in summary, it provides the implementation to handle retrieving or creating a player profile from the database in response to the GetPlayerProfile query.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Events/ClientDisconnected.cs\&quot;:\&quot;This file defines an event that is raised when a client disconnects from the server.\\n\\nKey things:\\n\\n- It defines a ClientDisconnected class that inherits from INotification. This means it is a notification event that can be published via the mediator pattern.\\n\\n- ClientDisconnected takes two parameters - the disconnected IPokemonServerClient object and an optional string reason for the disconnection. \\n\\n- When a client disconnects, an instance of ClientDisconnected would be created with the relevant client and reason, and published to notify other parts of the system that the client disconnected.\\n\\n- Other parts of the system can subscribe to the ClientDisconnected event via the mediator to be notified when a client disconnects and take appropriate actions.\\n\\n- It allows different parts of the server architecture to be decoupled and notified asynchronously of client disconnections via the mediator/publisher-subscriber pattern.\\n\\nSo in summary, it defines a notification event class for client disconnections that can be published via mediator to notify other components when a client disconnects from the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleHostDataPacket.cs\&quot;:\&quot;This file defines a BattleHostDataPacket class that represents a packet for sending battle host data in the Pokemon 3D Server network protocol.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin, BattlePartner Origin, and string Data in its constructor.\\n\\n- It has constructors to parse a raw packet into the class or create a new instance. \\n\\n- It implements the IPacket interface, which is likely used to identify it as a packet type.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that convert the class instance back into a raw packet object to send over the network in either direction.\\n\\nSo in summary, it defines a packet object for sending battle host data between the server and client, with methods to serialize/deserialize to and from the raw network packet format. This allows battle host data to be sent and received over the network using a standardized packet structure.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/CreatePlayerPacket.cs\&quot;:\&quot;This file defines a packet class for creating a player in the Pokemon 3D server.\\n\\nKey things:\\n\\n- CreatePlayerPacket is a record class that takes an integer ID as a constructor parameter. \\n\\n- It implements the IPacket interface, which is required for all packet classes.\\n\\n- There are constructors for parsing a raw packet into a CreatePlayerPacket object, and for serializing a CreatePlayerPacket back into a raw packet.\\n\\n- ToServerRawPacket serializes the packet data (just the ID) into a RawPacket to send to clients. \\n\\n- ToClientRawPacket is not supported as this packet is only sent from server to clients.\\n\\n- The packet is used to create a player entity on the server side and notify clients of the new player by sending this packet.\\n\\nKey functions:\\n\\n- Constructor(s) - To create a packet object from an ID or raw packet\\n- ToServerRawPacket - To serialize packet back to raw format for sending to clients\\n- Implements IPacket interface - Required for all packet classes\\n\\nSo in summary, it defines a packet class specifically for creating a new player entity on the server and notifying clients.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Security/PasswordHashing/PasswordHashingFactory.cs\&quot;:\&quot;This file contains the PasswordHashingFactory class which is used to get an instance of an IPasswordHashingProvider based on the configured provider in the SecurityOptions.\\n\\nKey things:\\n\\n- It implements the IPasswordHashingFactory interface\\n- In the constructor it saves references to the SecurityOptions and IServiceProvider\\n- It has a GetProvider() method which returns an instance of the configured password hashing provider\\n  - It uses ActivatorUtilities to create the instance, passing in the service provider and provider-specific options\\n  - It supports PBKDF2, Argon2, and would support any other implemented providers\\n- The providers it currently supports out of the box are Pbkdf2PasswordHashingProvider and Argon2PasswordHashingProvider\\n\\nSo in summary, this factory is responsible for abstracting away the concrete password hashing provider implementation and providing a single interface to get an instance of the configured provider. This allows swapping providers easily by just changing the configuration.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Views/MainConsoleView.cs\&quot;:\&quot;This file defines the main console view for the Pokemon 3D Server CLI application.\\n\\nKey things it does:\\n\\n- Defines the MainConsoleView class which represents the main window\\n- Initializes the title of the window with app name, version, framework version\\n- Creates child views for the player list view and console message view \\n- Lays out the child views and status bar within the main window\\n- Adds the child views and status bar to the main window\\n- Sets the initial focus to the command input field\\n\\nKey functions:\\n\\n- MainConsoleView constructor - Initializes the window and child views\\n- PlayerListView - Displays a list of connected players\\n- ConsoleMessageView - Displays console messages and has a command input field  \\n- StatusBar - Displays a status bar with a quit menu item\\n- Add() - Adds the child views and status bar to the main window\\n\\nSo in summary, it defines and initializes the main window that contains the player list, console output, command input and status bar for the CLI application interface.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Position.cs\&quot;:\&quot;This file defines a Position struct to represent the x, y, z coordinates of a player in 3D space.\\n\\nKey things:\\n\\n- Position is a readonly record struct with X, Y, Z float properties\\n- FromRawPacket static method parses a position string from a packet into a Position struct\\n- It handles different decimal separators by caching NumberFormatInfo objects\\n- ToRawPacketString method converts a Position back to a string for sending in a packet\\n\\nKey functions:\\n\\n- FromRawPacket: Parses a position string like \\\&quot;1.0|2.0|3.0\\\&quot; into a Position \\n- ToRawPacketString: Converts a Position back to a string for packets\\n- X, Y, Z properties to get/set individual coordinate values\\n- Implicit constructor to create a Position from individual floats\\n\\nSo in summary, it defines a simple data type to represent player positions, and provides parsing/formatting methods to convert between the struct and string representations used for network packets.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerLeft.cs\&quot;:\&quot;This file defines an event class called PlayerLeft that is fired when a player leaves/disconnects from the server.\\n\\nKey things:\\n\\n- It inherits from INotification, indicating it is an event/notification that can be subscribed to.\\n\\n- It takes two parameters - the IPlayer instance for the player that left, and an optional string reason for leaving. \\n\\n- Firing this event notifies any subscribers (like other game systems) that a player has left so they can clean up resources, update UI, etc. \\n\\n- The Player property provides access to information about the player that left like their ID, name, etc. \\n\\n- The optional Reason property allows including more context on why they left like if they disconnected, quit the game, were kicked, etc.\\n\\nSo in summary, this defines a notification/event class that is fired when a player disconnects/leaves to notify other systems and provide details about the departed player and potential reason. This allows different parts of the game to react appropriately when a player exits.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/Packets/IPacket.cs\&quot;:\&quot;This file defines an interface for packets in the Pokemon 3D Server network code.\\n\\nKey things:\\n\\n- It\\u0027s in the namespace TheDialgaTeam.Pokemon3D.Server.Core.Network.Interfaces.Packets, indicating it\\u0027s related to packet interfaces.\\n\\n- IPacket is the interface name. All packets will implement this interface.\\n\\n- It defines two methods:\\n  - ToServerRawPacket() - Converts the packet to a raw packet format to send to the server\\n  - ToClientRawPacket() - Converts the packet to a raw packet format to send to the client\\n\\nSo in summary:\\n\\n- Defines a common interface for all network packets\\n- Packets must implement methods to convert themselves to raw formats for sending to server and client\\n- This allows packets to be serialized/deserialized consistently for network transmission\\n- Provides a common way for packets to be encoded/decoded regardless of actual contents\\n\\nSo it establishes a contract for how packets interact with the network layer in a standardized way.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/SecurityOptionsValidation.cs\&quot;:\&quot;This file contains a class called SecurityOptionsValidation that implements the IValidateOptions interface from Microsoft.Extensions.Options.\\n\\nIts key purpose is to validate the security options that are configured in the application.\\n\\nKey functions:\\n\\n- Validate(string?, SecurityOptions) - The main validation method that is called. It takes the name of the options and the SecurityOptions object.\\n\\n- It checks if the configured PasswordHashingProvider in SecurityOptions is supported. \\n\\n- If PasswordHashingProvider is Pbkdf2Options, it further validates that the configured HashingAlgorithm in Pbkdf2Options is supported.\\n\\n- It collects any validation failures in a list. \\n\\n- Returns either a ValidateOptionsResult.Success if there are no failures, or ValidateOptionsResult.Fail with the list of failures.\\n\\nSo in summary, this class provides validation of the security related options to ensure only supported/valid configurations are used when the application starts up. It implements the options validation interface from Microsoft.Extensions.Options.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerClient.cs\&quot;:\&quot;This file defines the PokemonServerClient class which represents a client connected to the Pokemon server.\\n\\nKey functions:\\n\\n- SendPacket - Sends a packet to the client over the network.\\n\\n- Disconnect - Disconnects the client from the server. Waits for pending sends to complete if requested.\\n\\n- PacketDataProducer - Reads raw packet data from the client stream and queues it for processing.\\n\\n- HandleGameDataPacketQueue - Processes game data packets by publishing events.\\n\\n- HandlePacketHandlerExceptionQueue - Handles exceptions from packet handlers.\\n\\n- SendingQueueConsumer - Sends queued packets to the client over the network.\\n\\n- PingCheckTimerCallback - Disconnects client if no ping received within timeout.\\n\\n- PrintDebug/PrintTrace - Logging methods.\\n\\nThe main responsibilities of this class are:\\n\\n- Receiving and queuing packets from the client stream\\n- Sending packets to the client stream \\n- Handling disconnections\\n- Logging client activity\\n- Publishing packet events to be processed by handlers\\n- Managing timeouts and exceptions\\n\\nSo in summary, it provides the network communication layer for a single connected client.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/CommandProcessor.cs\&quot;:\&quot;This file contains the CommandProcessor class which is responsible for processing player commands in the Pokemon 3D Server.\\n\\nKey functions:\\n\\n- TryExecuteCommand(): Attempts to execute a command based on the message passed in. Checks if the message starts with the command prefix, then tries to find a matching player command to execute. Returns the result.\\n\\n- GetCommandArgs(): Parses a command message string and returns the individual arguments as strings. Handles quoted strings and escaping. Used to extract the individual arguments from a command.\\n\\nThe main responsibilities of the CommandProcessor are:\\n\\n- Checking if a message is a valid command \\n- Finding the matching command to execute based on the command name\\n- Parsing command arguments from the message\\n- Executing the command\\n- Returning the result\\n\\nSo in summary, it provides the core functionality for handling player commands - validating, finding, parsing and executing commands entered by players in the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BaseTable.cs\&quot;:\&quot;This file defines a base class for database tables in the Pokemon 3D Server project.\\n\\nKey things it does:\\n\\n- Defines a BaseTable class that all other database table classes will inherit from.\\n\\n- Adds an Id property decorated with attributes to make it the primary key for the table. The DatabaseGenerated attribute sets it to auto-increment.\\n\\n- Makes the Id property private set to prevent direct modification of the Id outside the class.\\n\\n- Marks the class as abstract so it cannot be directly instantiated, only inherited from.\\n\\n- Provides a common base with Id property that child table classes can inherit to automatically have a primary key without duplicating code.\\n\\n- Sets up conventions like primary key naming, auto-incrementing behavior etc that all database entity classes will follow for consistency.\\n\\nSo in summary, it:\\n\\n- Defines a base class for database table entities\\n- Adds a common primary key property \\n- Enforces conventions around primary keys\\n- Prevents direct modification of primary keys\\n- Provides inheritance for child table classes\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleJoinPacket.cs\&quot;:\&quot;This file defines a BattleJoinPacket class that represents a packet for joining a battle in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin (the sender) and BattlePartner (the other player joining the battle).\\n\\n- It has a constructor that takes a raw packet and parses the Origin and BattlePartner from it. \\n\\n- It implements the IPacket interface, which is required for all packet classes.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that convert the packet to a raw format to send to the server or client. \\n\\n- ToServerRawPacket() is empty since the server doesn\\u0027t need the BattlePartner. ToClientRawPacket() includes the BattlePartner in the raw packet data.\\n\\nSo in summary, it defines the packet format for joining a battle and provides methods to serialize/deserialize it to/from the raw packet format used for network communication. This allows cleanly representing battle join requests in the network layer.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/WorldOptions.cs\&quot;:\&quot;This file defines the WorldOptions class which contains configuration options for the world in the Pokemon 3D Server.\\n\\nKey functions/properties:\\n\\n- DoDayCycle - Boolean indicating whether the day/night cycle should be enabled.\\n\\n- Season - Enum representing the current season (Default, Spring, Summer, Fall, Winter). \\n\\n- Weather - Enum representing the current weather (Default, Sunny, Rainy, Snowy, etc).\\n\\n- TimeOffset - Integer representing the time offset in minutes from UTC. \\n\\n- SeasonMonth - Integer array mapping months to seasons. \\n\\n- WeatherSeason - Integer array mapping seasons to weather types.\\n\\nSo in summary, this class defines options that control things like the day/night cycle, current season, weather, time offset, and how seasons and weather are mapped to months/seasons in the game world. It provides configuration for the world simulation in the server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Cli/Views/ConsoleMessageView.cs\&quot;:\&quot;This file defines a ConsoleMessageView class that represents the view for displaying console messages in the Terminal.Gui GUI.\\n\\nKey functions:\\n\\n- It initializes a ListView (ConsoleView) bound to an ObservableCollectionDataSource to display the console messages.\\n\\n- It initializes a TextField (CommandInputField) to accept user input for commands. \\n\\n- It initializes a ScrollBarView to enable scrolling of the ListView.\\n\\n- It subscribes to scroll bar position change events to keep the ListView scrolled correctly. \\n\\n- It subscribes to changes in the console message collection to refresh the scroll bar size and position.\\n\\n- It binds the ListView to a ConsoleMessageViewModel which provides the data for the console messages.\\n\\n- On dispose, it cleans up subscriptions and resources held by the CompositeDisposable.\\n\\nSo in summary, it sets up the UI elements to display and scroll through console messages, binds it to a view model for the data, and handles scrolling and updating in response to data and UI changes.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Migrations/20231208172602_Initial.Designer.cs\&quot;:\&quot;This file is a migration file for Entity Framework Core. It is used to manage changes to the database schema.\\n\\nSome key things it does:\\n\\n- Defines the initial database schema/model using Entity Framework conventions and annotations. This maps the C# classes to database tables.\\n\\n- Configures relationships between entities/tables using Fluent API (the HasOne, WithOne, etc methods).\\n\\n- Annotates the class with [Migration] and [DbContext] attributes to identify it as a migration for a specific DbContext.\\n\\n- Builds the initial target model using the ModelBuilder passed into the BuildTargetModel method. This defines the initial schema. \\n\\n- Includes metadata like the product version, migration ID, etc. \\n\\nThe main functions are:\\n\\n- BuildTargetModel - Defines the initial target schema model\\n- Up and Down methods (not shown) - Code to apply the migration to the database on upgrade/create, and revert it on downgrade.\\n\\nSo in summary, it defines the starting point database schema/model that Entity Framework will use and provides a way to apply/revert that schema change when the database is updated. This allows evolving the data model over time via migrations.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleQuitPacket.cs\&quot;:\&quot;This file defines a BattleQuitPacket class that represents a packet for quitting a battle in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It implements the IPacket interface, meaning it can serialize/deserialize to/from a raw packet format.\\n\\n- The constructor takes the origin (who sent the packet) and battle partner (who they were battling). \\n\\n- There is a constructor that parses a raw packet into a BattleQuitPacket object.\\n\\n- ToServerRawPacket() serializes the packet data to be sent to the server. \\n\\n- ToClientRawPacket() serializes the packet data to be sent to the client.\\n\\nSo in summary, this packet class:\\n\\n- Represents a battle quit packet \\n- Can serialize/deserialize to/from raw packets\\n- Contains the origin and battle partner data\\n- Has methods to generate raw packets for server/client\\n\\nIt allows quitting a battle to be represented as an object that can be serialized for network transmission.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Localization/Interfaces/IStringLocalizer.cs\&quot;:\&quot;This file defines an interface for string localization in TheDialgaTeam Pokemon 3D Server.\\n\\nKey things:\\n\\n- IStringLocalizer is an interface that defines the contract for classes that handle string localization.\\n\\n- It has two indexer properties that allow retrieving localized strings:\\n\\n  1. this[Func\\u003cLocalizedString, string\\u003e] - Gets a localized string by passing a function that returns the LocalizedString enum value.\\n\\n  2. this[Func\\u003cLocalizedString, string\\u003e, params object?[] args] - Gets a localized string by passing a function that returns the LocalizedString enum value, along with optional format arguments.\\n\\n- Classes that implement this interface will be responsible for actually retrieving the localized string values based on the LocalizedString enum passed in. This could involve looking up strings from localized resource files, a database, etc.\\n\\n- It provides a clean abstraction for retrieving localized strings throughout the codebase in a way that is decoupled from the actual implementation of where the strings are stored.\\n\\nSo in summary, it defines the contract for string localization services in the application through an interface that classes can implement to retrieve localized strings.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Interfaces/IPlayerFactory.cs\&quot;:\&quot;This file defines an interface called IPlayerFactory.\\n\\nAn interface in C# defines a contract that classes can implement, without providing any implementation details. Interfaces allow for abstraction and loose coupling between different parts of an application.\\n\\nThe IPlayerFactory interface defines the contract for creating Player objects in the game. Classes that implement this interface will be responsible for actually creating and returning Player instances.\\n\\nKey functions defined in the IPlayerFactory interface:\\n\\n- CreatePlayer() - This is the main/only method defined. It takes in a client, player ID, and game data packet as parameters. The implementing class will use these to create and return a new Player object.\\n\\nSo in summary:\\n\\n- Defines a factory interface for creating Player objects\\n- Classes that implement this can handle actual player object creation \\n- Allows abstraction and loose coupling between player creation and rest of code\\n- CreatePlayer() is the sole method that returns a new Player instance\\n\\nBy defining an interface, different implementations of player creation can be plugged in without changing other code that depends on this interface. This follows good object oriented and software design principles.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/BusyType.cs\&quot;:\&quot;This file defines an enum called BusyType that is used to represent different busy states of a player in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It is in the namespace TheDialgaTeam.Pokemon3D.Server.Core.Player, indicating it relates to player data in the server core.\\n\\n- BusyType is an enum, which allows discrete state values to be defined.\\n\\n- It defines 4 possible busy states:\\n  - NotBusy \\u003d 0\\n  - Battling \\u003d 1 \\n  - Chatting \\u003d 2\\n  - Inactive \\u003d 3\\n\\n- These states can presumably be used by other parts of the server code to track and represent what a player is currently doing (battling, chatting, idle etc).\\n\\n- By using an enum, the states are strongly typed rather than just integers, making the code more self-documenting.\\n\\nSo in summary, this file defines an enumeration that is used to represent different busy/activity states of players in the Pokemon 3D server code. The enum values allow the state to be checked and set in other parts of the codebase.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/DatabaseContext.cs\&quot;:\&quot;This file defines the DatabaseContext class that represents the Entity Framework Core database context for interacting with the database.\\n\\nKey functions:\\n\\n- OnModelCreating - Configures the Entity Framework model and relationships between entities. Defines one-to-one, one-to-many etc relationships.\\n\\n- OnConfiguring - Configures the underlying database provider (SQLite in this case) based on options. Sets the connection string and other configuration. \\n\\n- DbSet properties - Expose entity sets for the different database entities (tables) like PlayerProfiles, LocalWorlds etc. These are used to query, add, update entities.\\n\\n- Constructor - Takes in an IPokemonServerOptions instance to get database configuration from options. \\n\\nThe main purpose of this class is to provide an object context for Entity Framework to work with the database using entity models. It handles mapping entities to database tables, configuring relationships and connecting to the actual database based on configuration.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Interfaces/IPokemonServerClient.cs\&quot;:\&quot;This file defines an interface called IPokemonServerClient that represents a client connected to the Pokemon 3D server.\\n\\nKey functions:\\n\\n- RemoteIpAddress - Gets the IP address of the remote/connected client.\\n\\n- SendPacket(IPacket packet) - Sends a packet object to the connected client. \\n\\n- SendPacket(IRawPacket rawPacket) - Sends a raw packet (not an object) to the connected client.\\n\\n- Disconnect(string? reason, bool waitForCompletion) - Disconnects the client from the server, optionally providing a reason and waiting for the disconnection to complete.\\n\\nSo in summary, this interface defines the basic functions a class would need to implement to represent a client connected to the server. Classes that implement this interface can then be used to send data to and disconnect specific clients. The interface standardizes the client connection behavior across different implementations.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/ServerMessagePacket.cs\&quot;:\&quot;This file defines a ServerMessagePacket class that represents a server message packet in the Pokemon 3D Server network protocol.\\n\\nKey things:\\n\\n- It inherits from IPacket, which means it can be serialized/deserialized to a raw network packet.\\n\\n- The constructor takes a string message as the only property. \\n\\n- ToServerRawPacket() method serializes the packet to a RawPacket object that can be sent from server to client. \\n\\n- ToClientRawPacket() throws an exception since this packet type is only meant to be sent from server to client, not vice versa.\\n\\n- There is also a constructor that takes a RawPacket and extracts the message string from it to deserialize the packet.\\n\\nSo in summary, this class represents a server message packet in the network protocol, with functionality to:\\n\\n- Construct from a message string \\n- Serialize to a raw packet for sending to clients\\n- Deserialize from a raw packet received from clients\\n\\nIt allows the server to send simple string messages to connected clients over the network using this defined packet type.\&quot;,\&quot;/.run/TheDialgaTeam.Pokemon3D.Server.Cli.run.xml\&quot;:\&quot;This file is a run configuration file used by JetBrains Rider IDE to run the .NET Core project TheDialgaTeam.Pokemon3D.Server.Cli.\\n\\nSome key things it does:\\n\\n- Sets the EXE_PATH to the built executable for the project in the Debug folder\\n- Sets the WORKING_DIRECTORY to the Debug folder \\n- Sets an environment variable DOTNET_ENVIRONMENT to Development\\n- Specifies to use an external console when running \\n- Points to the project file location and target framework\\n- Specifies to build the project before running\\n\\nIn summary, it defines all the settings needed by the IDE to build and run the specified .NET Core project, such as executable path, arguments, working directory, environment variables etc. This allows the project to be run directly from within the IDE.\&quot;,\&quot;/.run/TheDialgaTeam.Pokemon3D.Server.Gui.run.xml\&quot;:\&quot;This file is an IntelliJ IDEA run configuration file for a .NET project.\\n\\nKey functions:\\n\\n- It defines a run configuration named \\\&quot;TheDialgaTeam.Pokemon3D.Server.Gui\\\&quot; for the .NET project of the same name.\\n\\n- It specifies the EXE_PATH as the built executable located at $PROJECT_DIR$/TheDialgaTeam.Pokemon3D.Server.Gui/bin/Debug/net7.0/Pokemon3D.Server.Gui.exe\\n\\n- It sets the WORKING_DIRECTORY to the bin/Debug/net7.0 folder where the executable is located. \\n\\n- It passes the DOTNET_ENVIRONMENT variable with value \\\&quot;Development\\\&quot;.\\n\\n- It specifies the project path and tracks changes to the project executable path, arguments, and working directory so the run configuration stays in sync with the project.\\n\\n- The method specifies to perform a \\\&quot;Build\\\&quot; action before running, to ensure the project is built.\\n\\nSo in summary, it defines a run configuration in IntelliJ IDEA to execute the .NET project executable, after building it, with the proper working directory and environment variables.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Player/Events/PlayerJoin.cs\&quot;:\&quot;This file defines an event that is triggered when a player joins the game.\\n\\nKey things:\\n\\n- It defines a PlayerJoin class that inherits from INotification. This means it is an event notification that can be handled by the mediator.\\n\\n- PlayerJoin takes a single parameter of type IPlayer. This is the player object that joined. \\n\\n- When a player connects and is initialized as an IPlayer object, an instance of PlayerJoin will be created passing that player. \\n\\n- This PlayerJoin notification is then published to the mediator so that any subscribers can handle the player join event.\\n\\n- No functions are defined here directly. It is simply defining the event class that will be used to notify others of a player joining via the mediator event system.\\n\\n- Other parts of the code would subscribe to this PlayerJoin event from the mediator and perform actions like welcoming the player, initializing their state, etc.\\n\\nSo in summary, it defines the class for a player join event notification that can be published to and handled by the mediator event system. This allows different parts of the code to react to a new player connecting.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Commands/Interfaces/IPlayerCommand.cs\&quot;:\&quot;This file defines an interface for player commands in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- IPlayerCommand inherits from ICommand, which is the base command interface. This means player commands will have common command functionality.\\n\\n- It defines a RequiredPermission property that specifies the minimum player permission required to use the command. This is used to restrict commands to certain player types (admin, mod, etc).\\n\\n- The main method is ExecutePlayerCommand, which takes the player executing the command and the command arguments. This is where the actual command logic would be implemented.\\n\\n- Implementing classes would define the RequiredPermission and ExecutePlayerCommand method. \\n\\nSo in summary, this interface:\\n\\n- Defines the contract for player commands \\n- Adds player-specific functionality like permission checks\\n- Commands inheriting this can access player data and restrict usage\\n- The Execute method contains the actual command logic\\n\\nIt allows the server to have commands that interact with players and restrict usage based on player permissions. Implementing classes would define individual command behaviors.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/TradeOfferPacket.cs\&quot;:\&quot;This file defines a TradeOfferPacket class that represents a packet for sending a trade offer in the Pokemon 3D server network.\\n\\nKey things:\\n\\n- It defines a TradeOfferPacket record with Origin, TradePartner, and PokemonData properties. These represent the origin of the packet, the trade partner, and the data of the Pokemon being offered.\\n\\n- It has a constructor that takes an IRawPacket to deserialize the packet data into the TradeOfferPacket object. \\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that serialize the TradeOfferPacket back into a RawPacket for sending to the server or client. \\n\\n- ToServerRawPacket() only includes the Origin and PokemonData since the server doesn\\u0027t need the TradePartner. \\n\\n- ToClientRawPacket() includes Origin, TradePartner (serialized as a string), and PokemonData to provide full information to the client.\\n\\nSo in summary, it defines a packet class for trade offers and provides serialization/deserialization methods to convert between the object and raw packet representations for sending on the network.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PlayerIdPacket.cs\&quot;:\&quot;This file defines a PlayerIdPacket class that represents a packet for sending a player\\u0027s ID over the network in Pokemon 3D Server.\\n\\nKey things:\\n\\n- It inherits from IPacket, which defines the interface for packets.\\n\\n- The class has a single constructor that takes an int Id. \\n\\n- It has another constructor that takes an IRawPacket and parses the player ID from it.\\n\\n- It implements ToServerRawPacket() which converts the packet to a RawPacket format to send to the server. \\n\\n- It implements ToClientRawPacket() but throws an exception as this packet is only meant to be sent from server to client.\\n\\n- The main purpose is to encapsulate the player ID in a packet object that can be serialized/deserialized for network transmission between client and server.\\n\\nKey functions:\\n\\n- Constructors to initialize from an int ID or raw packet\\n- ToServerRawPacket() - Converts the packet to a raw format for the server\\n- ToClientRawPacket() - Throws exception as packet is server-\\u003eclient only\\n- Encapsulates the player ID for network transmission\\n\\nSo in summary, it defines a packet class specifically for sending a player\\u0027s ID over the network in the game server.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/ServerOptions.cs\&quot;:\&quot;This file defines the ServerOptions class which contains configuration options for the server.\\n\\nKey functions:\\n\\n- Stores server name, description and welcome messages\\n- Allows configuring whitelisted/blacklisted game modes \\n- Sets maximum number of players\\n- Configures offline mode setting\\n- Sets time (in minutes) before kicking players who are away from keyboard or not pinging\\n\\nThe purpose of this class is to encapsulate all the configurable server settings in one place. These options can then be loaded from configuration files/sources and used to configure the server runtime behavior. Things like server name, game mode restrictions, player limits etc. can all be configured through these options.\&quot;,\&quot;/localization.json\&quot;:\&quot;This localization.json file is used for localization and internationalization of an application.\\n\\nKey functions:\\n\\n- Defines the localization data for different cultures/languages. In this example it only has data for English (\\\&quot;en\\\&quot;) but other cultures could be added.\\n\\n- Allows storing translated text, labels, messages etc. for each supported culture. This content would be added under the relevant culture key (e.g. \\\&quot;en\\\&quot;). \\n\\n- Provides a single source of truth for all text/labels used in the UI. This ensures a consistent localization strategy and prevents hard-coded strings.\\n\\n- Can be used by the application to dynamically load the correct localized resources at runtime based on the user\\u0027s language/region settings.\\n\\n- Facilitates the translation process by having all localized content in one file per culture, rather than scattered throughout code. Makes it easier to manage, update and add new translations.\\n\\n- Format is commonly JSON to allow parsing localization data into objects/variables in code. JSON is also easily editable by humans unlike binary formats.\\n\\n- Helps internationalize the app by supporting multiple languages from the same codebase without additional development effort.\\n\\nSo in summary, it defines the localization data structure and provides a way to externalize translations for an internationalized application.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Localization/Formats/ArrayStringFormat.cs\&quot;:\&quot;This file defines a class called ArrayStringFormat that is used to format arrays of objects into a string.\\n\\nKey points:\\n\\n- It implements the IFormattable interface, which allows objects to control their string formatting.\\n\\n- The constructor takes an array of objects, an optional format string, and optional format provider. These are stored as private fields. \\n\\n- ToString is overridden to implement the IFormattable formatting. It joins the array elements into a comma separated string.\\n\\n- Each array element is formatted to a string by:\\n  - Checking if it implements IFormattable and calling ToString on it\\n  - Or just calling ToString() if not IFormattable\\n\\n- The optional format and format provider passed to the constructor are used when calling ToString on IFormattable elements.\\n\\nSo in summary, it provides a way to easily format an array of objects into a comma separated string, allowing each element to control its own formatting if it implements IFormattable. This allows arrays to be formatted as strings.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleClientDataPacket.cs\&quot;:\&quot;This file defines a BattleClientDataPacket class that represents a packet for sending battle client data in the Pokemon 3D Server network protocol.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin, BattlePartner Origin, and string Data in its constructor.\\n\\n- It has a constructor that parses an incoming RawPacket into the packet fields. \\n\\n- It implements the IPacket interface which is required for all packet classes.\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that convert the packet back into a RawPacket for sending to the server or client respectively. \\n\\n- ToServerRawPacket() only includes the Origin and Data in the packet.\\n\\n- ToClientRawPacket() includes the Origin, BattlePartner as a string, and Data in the packet.\\n\\nSo in summary, it defines a packet class for sending battle client data between client/server, with methods to serialize to/from the raw packet format used for network transmission.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Providers/MicrosoftGenericHostOptionsProvider.cs\&quot;:\&quot;This file defines a class called MicrosoftGenericHostOptionsProvider that implements the IPokemonServerOptions interface.\\n\\nIt is used to provide access to the various options configured in the Microsoft Generic Host (ServerOptions, NetworkOptions, etc).\\n\\nKey functions:\\n\\n- Constructor: Takes IOptionsMonitor instances for each option type and sets up event handlers to update the options properties when they change.\\n\\n- Properties: Expose the current values of each option type via properties like ServerOptions, NetworkOptions etc. \\n\\n- Dispose: Disposes of the IDisposable event handlers set up in the constructor to clean up resources.\\n\\nSo in summary, it centralizes access to all the configured options from the host and provides notifications when they are updated. This allows other classes to simply depend on IPokemonServerOptions to get the latest option values.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/DatabaseOptions.cs\&quot;:\&quot;This file defines options for configuring the database connection in the Pokemon 3D Server project.\\n\\nKey things:\\n\\n- DatabaseOptions class - Main class that holds database configuration options\\n- SupportedProviders property - Lists supported database providers (currently only Sqlite)\\n- DatabaseProvider property - Sets the database provider to use\\n- SqliteOptions class - Holds Sqlite-specific configuration options\\n- Sqlite property - Instance of SqliteOptions for configuring Sqlite\\n\\nSome key SqliteOptions properties:\\n\\n- DataSource - Path to the Sqlite database file \\n- Mode - Open mode for the database connection\\n- Cache - Caching mode\\n- Password - Password if database is encrypted\\n- DefaultTimeout - Default operation timeout in seconds\\n\\nSo in summary, this file defines classes and properties to configure which database provider to use (Sqlite) and customize the Sqlite connection settings like file path, open mode, caching etc. This allows configuring the database connection through options.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Gui/Views/MainWindow.axaml.cs\&quot;:\&quot;This file defines the main window for the GUI of the Pokemon 3D server application.\\n\\nKey things it does:\\n\\n- Sets up the InitializeComponent() method which loads the XAML layout for the main window\\n\\n- Sets the title of the window to display the application name, version and framework version by accessing properties from the ApplicationUtility class\\n\\n- ApplicationUtility is a utility class that provides common application metadata\\n\\n- The window inherits from the Window class in Avalonia to get basic window functionality\\n\\n- No other logic is defined in this class, it is likely just setting up the basic window shell that other views/components will be loaded into.\\n\\nKey functions:\\n\\n- InitializeComponent() - Loads the XAML layout\\n- Constructor - Sets the window title\\n\\nSo in summary, this file defines the main window class and handles basic window initialization and title setting. It acts as a shell for the rest of the GUI application to be loaded into.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/StartLocalWorld.cs\&quot;:\&quot;This file defines a command class called StartLocalWorld that is used to start a local world on the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It implements the ICommand interface, indicating it is a command that can be executed.\\n\\n- The generic type parameter \\u003cbool\\u003e means this command will return a boolean value when executed. \\n\\n- It is a record class, so it has automatically implemented properties. No methods are defined.\\n\\n- When executed, this command will likely call code in the server core to initialize and start a new local world instance. \\n\\n- The returned boolean value would indicate if the world start was successful or not.\\n\\nSo in summary, this command class represents the \\\&quot;start local world\\\&quot; command that can be issued to the server via its command system. When executed, it will attempt to start a new local world and return a status about the result. No implementation details are shown here, just the interface it provides.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/BattleRequestPacket.cs\&quot;:\&quot;This file defines a BattleRequestPacket class that represents a battle request packet in the network protocol.\\n\\nKey things:\\n\\n- It is a record class that takes an Origin (the requesting player) and BattlePartner (the player being challenged)\\n\\n- It has a constructor that takes a raw packet and parses the Origin and BattlePartner from it\\n\\n- It implements the IPacket interface, which is required for all packet classes\\n\\n- It has ToServerRawPacket() and ToClientRawPacket() methods that convert the packet to a raw packet format suitable for sending to the server or client respectively\\n\\n- ToServerRawPacket() is empty since the server doesn\\u0027t need the BattlePartner. ToClientRawPacket() includes the BattlePartner in the data.\\n\\nSo in summary, it defines the format of a battle request packet and provides methods to serialize/deserialize it to/from the raw packet format used for network communication. This allows battle requests to be sent between the client and server as part of the multiplayer protocol.\&quot;,\&quot;/appsettings.schema.json\&quot;:\&quot;This file is a JSON schema that defines the configuration structure and validation for the appsettings.json file used by the Pokemon 3D Server.\\n\\nKey functions:\\n\\n- Defines the overall structure and properties that can be configured in appsettings.json\\n- Groups related configuration properties under sections (e.g. TheDialgaTeam.Serilog)\\n- Defines data types for properties (e.g. boolean, string, object) \\n- Provides default values for some properties\\n- References common enum definitions to restrict property values (e.g. log levels)\\n- Allows overriding defaults for certain properties\\n- Provides descriptions and titles to document the configuration\\n- Validates the structure and data types of the appsettings.json file\\n\\nIn summary, it standardizes the configuration format and ensures only valid configuration values are used by defining the schema. This helps avoid issues from invalid configuration values at runtime.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/PokemonServerHandler.cs\&quot;:\&quot;This file contains the PokemonServerHandler class which handles network communication for the Pokemon server.\\n\\nKey functions:\\n\\n- Handle(StartServer) - Starts the server by calling StartServerTask()\\n- Handle(StopServer) - Stops the server by cancelling the listener task\\n- StartServerTask() - Main startup logic:\\n  - Sets the binding endpoint\\n  - Optionally creates UPnP port mapping\\n  - Starts the server listener task\\n- ServerListenerTask() - Runs the TCP listener loop to accept new client connections\\n- ServerPortCheckingTask() - Periodically checks if the server port is accessible from the public IP\\n- CreatePortMappingTask() - Uses UPnP to map the server port \\n- Print methods - Logs status/error messages to the console\\n\\nThe main responsibilities of this class are:\\n\\n- Starting/stopping the TCP listener on the server port\\n- Optionally handling UPnP port mapping  \\n- Accepting new client connections and passing them to the mediator\\n- Periodically checking server port accessibility\\n- Logging status/errors to the console\\n\\nSo in summary, it handles all the network/port binding logic to run the server and accept new client connections.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/CreateLocalWorld.cs\&quot;:\&quot;This file defines a command for creating a local world in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It defines a CreateLocalWorld command class that takes an IPlayer as a parameter. This command will return an ILocalWorld.\\n\\n- CreateLocalWorld implements the ICommand interface, which means it can be used as a command that returns a result. \\n\\n- The purpose of this command is to create a new local world instance for the given player when executed.\\n\\n- It uses interfaces like IPlayer and ILocalWorld which define the expected behavior for player and world entities in the server.\\n\\n- By implementing ICommand\\u003cILocalWorld\\u003e, it specifies that this command will return an ILocalWorld when executed.\\n\\nSo in summary, this command class allows creating a new local world instance for a player when executed through the command system. This is likely used when a player first joins the game world to initialize their local view of the world.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Database/Tables/BlockedPlayerProfile.cs\&quot;:\&quot;This file defines the BlockedPlayerProfile table class in the database for the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It inherits from BaseTable, which provides common functionality for database table classes.\\n\\n- It has two properties:\\n  - PlayerProfile - The profile of the player doing the blocking\\n  - BlockedProfile - The profile of the player being blocked\\n\\n- PlayerProfile and BlockedProfile are both of type PlayerProfile, which is another database table class representing player profiles.\\n\\n- The properties are marked as \\\&quot;required\\\&quot; meaning they must be set when creating a new BlockedPlayerProfile record.\\n\\n- This table represents a many-to-many relationship between players - it tracks which players have blocked which other players.\\n\\nSo in summary, this class defines the structure of the BlockedPlayerProfile database table, which is used to store data about which players have blocked communication with other players in the game. It ties two PlayerProfile records together to represent a blocking relationship between those two players.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Network/Packets/PingPacket.cs\&quot;:\&quot;This file defines a PingPacket class that represents a ping packet in the network protocol.\\n\\nKey things:\\n\\n- It implements the IPacket interface, which defines common packet functionality.\\n\\n- There are two constructors - one that takes an Origin to create a new packet, and one that takes a raw packet to deserialize an existing one. \\n\\n- ToServerRawPacket throws an exception, indicating this packet type is not sent to the server.\\n\\n- ToClientRawPacket serializes the packet data into a RawPacket object to send to the client. \\n\\n- The packet contains just an Origin property to track where it came from.\\n\\nSo in summary, this class:\\n\\n- Defines the data structure of a ping packet\\n- Allows creating new packets \\n- Serializes/deserializes to/from the raw network format\\n- Indicates ping packets only travel from server to client\\n\\nIt provides the object representation and conversion logic for ping packets in the network protocol.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Localization/StringLocalizer.cs\&quot;:\&quot;This file defines a StringLocalizer class that is used to localize strings based on the current culture/locale.\\n\\nKey things:\\n\\n- It implements the IStringLocalizer interface which defines the localization methods.\\n\\n- In the constructor it takes an IPokemonServerOptions which contains the localization configuration/options.\\n\\n- It has an indexer [] that returns a localized string by passing in a Func that retrieves the string from the localized culture data. \\n\\n- The indexer has an overload that allows formatting the localized string with arguments.\\n\\n- The GetLocalizedTemplate method is used to recursively search the culture hierarchy (current culture -\\u003e parent cultures) to find a matching localized string based on the culture name.\\n\\n- If no match is found it returns an empty string.\\n\\nSo in summary, it provides localization of strings by looking up the string for the current culture/locale configuration and allows easy access to localized strings through an indexer. The options object defines where it looks up the localized data.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/Options/Validations/NetworkOptionsValidation.cs\&quot;:\&quot;This file contains a class called NetworkOptionsValidation that is used to validate NetworkOptions configuration options.\\n\\nKey things it does:\\n\\n- Implements the IValidateOptions interface which is used for validating options in .NET.\\n\\n- Contains a Validate method that takes in the NetworkOptions and validates the properties:\\n\\n  - Validates the BindingInformation property by trying to parse it into an IPEndPoint. Checks that the IP address is valid.\\n\\n  - Validates the UpnpDiscoveryTime property is at least 1 second.\\n\\n- Returns either a ValidateOptionsResult.Success if validation passes, or ValidateOptionsResult.Fail with a list of failure messages if validation fails.\\n\\nKey functions:\\n\\n- Validate - Main validation method that runs all the validation logic.\\n\\n- TryParse - Used to parse the BindingInformation into an IPEndPoint \\n\\n- GetHostAddresses/GetHostName - Used to get valid IP addresses to check BindingInformation against.\\n\\nSo in summary, it provides a way to validate the NetworkOptions configuration and ensure required properties are set correctly before the server starts.\&quot;,\&quot;/TheDialgaTeam.Pokemon3D.Server.Core/World/Commands/StopLocalWorld.cs\&quot;:\&quot;This file defines a command class called StopLocalWorld that is used to stop the local world in the Pokemon 3D Server.\\n\\nKey things:\\n\\n- It implements the ICommand interface, indicating it is a command that can be executed.\\n\\n- ICommand has a generic type parameter of bool, so this command will return a boolean result. \\n\\n- It is a record class, so it has automatic properties and constructor. No methods are defined.\\n\\n- When executed, this command will stop the local world/instance running on the server. \\n\\n- The result returned will indicate if the world was stopped successfully or not.\\n\\nSo in summary, this defines a simple command that can be called to stop the local world running on the server, and returns a boolean to indicate if it was stopped or not. It allows remote clients to issue a command to shutdown the server world from a distance.\&quot;}&quot;}" />
  </component>
</project>